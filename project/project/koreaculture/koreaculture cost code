{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\n\n# 첫 번째 파일과 두 번째 파일 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# XLSX 파일 불러오기\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\n# spending_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\n# activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 순위를 기준으로 지출 데이터와 활동 코드를 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# '항목ID' 컬럼을 기준으로 활동 코드 설명을 병합\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 여가 활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"항목명\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(average_spending)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:23:20.765692Z","iopub.execute_input":"2024-11-15T01:23:20.766171Z","iopub.status.idle":"2024-11-15T01:23:20.954032Z","shell.execute_reply.started":"2024-11-15T01:23:20.766128Z","shell.execute_reply":"2024-11-15T01:23:20.952387Z"}},"outputs":[{"name":"stdout","text":"Empty DataFrame\nColumns: [항목명, amount_spent]\nIndex: []\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"print(merged_df.head())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:23:52.435732Z","iopub.execute_input":"2024-11-15T01:23:52.436743Z","iopub.status.idle":"2024-11-15T01:23:52.443551Z","shell.execute_reply.started":"2024-11-15T01:23:52.436694Z","shell.execute_reply":"2024-11-15T01:23:52.442326Z"}},"outputs":[{"name":"stdout","text":"Empty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 항목ID, 항목명, 변수명, 데이터타입]\nIndex: []\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# activity_code와 항목ID의 고유 값 확인\nprint(\"Activity Code Unique Values:\")\nprint(merged_df['activity_code'].unique())\n\nprint(\"항목ID Unique Values:\")\nprint(code_description['항목ID'].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:24:24.254043Z","iopub.execute_input":"2024-11-15T01:24:24.254496Z","iopub.status.idle":"2024-11-15T01:24:24.264011Z","shell.execute_reply.started":"2024-11-15T01:24:24.254455Z","shell.execute_reply":"2024-11-15T01:24:24.262642Z"}},"outputs":[{"name":"stdout","text":"Activity Code Unique Values:\n[]\n항목ID Unique Values:\n[  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\n 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\n 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216\n 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234\n 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252\n 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270\n 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288\n 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306\n 307 308 309 310 311 312 313 314 315 316 317 318 319 320]\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# 첫 번째 파일과 두 번째 파일 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# XLSX 파일 불러오기\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\n# spending_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\n# activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 병합 결과 확인 (activity_code와 항목ID의 매칭이 잘 되었는지)\nprint(activity_codes_melted.head())\n\n# 순위를 기준으로 지출 데이터와 활동 코드를 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# '항목ID' 컬럼을 기준으로 활동 코드 설명을 병합\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 병합된 결과 확인\nprint(merged_df.head())\n\n# 여가 활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"항목명\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(average_spending)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:24:57.132388Z","iopub.execute_input":"2024-11-15T01:24:57.132832Z","iopub.status.idle":"2024-11-15T01:24:57.312488Z","shell.execute_reply.started":"2024-11-15T01:24:57.132792Z","shell.execute_reply":"2024-11-15T01:24:57.311268Z"}},"outputs":[{"name":"stdout","text":"        ID    rank  activity_code\n0  1003001  Q2_1_1           58.0\n1  1003002  Q2_1_1           29.0\n2  1003003  Q2_1_1           84.0\n3  1003004  Q2_1_1           75.0\n4  1003021  Q2_1_1           52.0\nEmpty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 항목ID, 항목명, 변수명, 데이터타입]\nIndex: []\nEmpty DataFrame\nColumns: [항목명, amount_spent]\nIndex: []\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"# activity_code와 항목ID의 고유 값 확인\nprint(\"Activity Code Unique Values:\")\nprint(activity_codes_melted['activity_code'].unique())\n\nprint(\"항목ID Unique Values:\")\nprint(code_description['항목ID'].unique())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:25:47.507872Z","iopub.execute_input":"2024-11-15T01:25:47.508287Z","iopub.status.idle":"2024-11-15T01:25:47.518860Z","shell.execute_reply.started":"2024-11-15T01:25:47.508247Z","shell.execute_reply":"2024-11-15T01:25:47.517592Z"}},"outputs":[{"name":"stdout","text":"Activity Code Unique Values:\n[58. 29. 84. 75. 52. 59. 74. 77. 64. 65. 71.  7. 63. 73. 43. 47. 55. 51.\n 33. 17.  3.  2.  8. 24. 20. 49. 31. 70. 46. 35. 16. 30.  4. 21. 54. 12.\n 15. 22. 14. 19. 86. 40. 41. 50. 32. 34. 61. 48. 81. 37.  5. 67. 39. 62.\n 66. 87. 83.  6. 23. 42. 76. 78. 68. 25. 36.  1. 56. 44. 38. 10. 82. 79.\n 53. 26. 11. 13. 72. 85. 60. 57.  9. 80. 18. 88. 69. 27. 45. nan 28.]\n항목ID Unique Values:\n[  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 108\n 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126\n 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144\n 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162\n 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180\n 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198\n 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216\n 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234\n 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252\n 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270\n 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288\n 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306\n 307 308 309 310 311 312 313 314 315 316 317 318 319 320]\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# 공백 제거 및 대소문자 통일\nactivity_codes_melted['activity_code'] = activity_codes_melted['activity_code'].astype(str).str.strip().str.upper()\ncode_description['항목ID'] = code_description['항목ID'].astype(str).str.strip().str.upper()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:26:10.995651Z","iopub.execute_input":"2024-11-15T01:26:10.996125Z","iopub.status.idle":"2024-11-15T01:26:11.089877Z","shell.execute_reply.started":"2024-11-15T01:26:10.996081Z","shell.execute_reply":"2024-11-15T01:26:11.088153Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"# activity_codes_df와 spending_df의 melt 결과 확인\nprint(spending_melted.head())\nprint(activity_codes_melted.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:26:15.915463Z","iopub.execute_input":"2024-11-15T01:26:15.915935Z","iopub.status.idle":"2024-11-15T01:26:15.926858Z","shell.execute_reply.started":"2024-11-15T01:26:15.915890Z","shell.execute_reply":"2024-11-15T01:26:15.925509Z"}},"outputs":[{"name":"stdout","text":"        ID      rank  amount_spent\n0  1003001  Q2_5_1_N           0.0\n1  1003002  Q2_5_1_N        2000.0\n2  1003003  Q2_5_1_N           0.0\n3  1003004  Q2_5_1_N           0.0\n4  1003021  Q2_5_1_N        2000.0\n        ID    rank activity_code\n0  1003001  Q2_1_1          58.0\n1  1003002  Q2_1_1          29.0\n2  1003003  Q2_1_1          84.0\n3  1003004  Q2_1_1          75.0\n4  1003021  Q2_1_1          52.0\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"# 병합 후 activity_code와 항목ID 확인\nprint(merged_df[['activity_code', '항목ID']].head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:26:34.763270Z","iopub.execute_input":"2024-11-15T01:26:34.763728Z","iopub.status.idle":"2024-11-15T01:26:34.771781Z","shell.execute_reply.started":"2024-11-15T01:26:34.763668Z","shell.execute_reply":"2024-11-15T01:26:34.770630Z"}},"outputs":[{"name":"stdout","text":"Empty DataFrame\nColumns: [activity_code, 항목ID]\nIndex: []\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# 항목명 컬럼 확인\nprint(merged_df['항목명'].head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:26:39.084002Z","iopub.execute_input":"2024-11-15T01:26:39.084421Z","iopub.status.idle":"2024-11-15T01:26:39.091358Z","shell.execute_reply.started":"2024-11-15T01:26:39.084381Z","shell.execute_reply":"2024-11-15T01:26:39.090124Z"}},"outputs":[{"name":"stdout","text":"Series([], Name: 항목명, dtype: object)\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"# 첫 번째 파일과 두 번째 파일 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# XLSX 파일 불러오기\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 공백 제거 및 대소문자 통일\nactivity_codes_melted['activity_code'] = activity_codes_melted['activity_code'].astype(str).str.strip().str.upper()\ncode_description['항목ID'] = code_description['항목ID'].astype(str).str.strip().str.upper()\n\n# 병합 결과 확인\nprint(\"Activity Codes Melted:\")\nprint(activity_codes_melted.head())\n\n# 순위를 기준으로 지출 데이터와 활동 코드를 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# '항목ID' 컬럼을 기준으로 활동 코드 설명을 병합\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 병합된 결과 확인\nprint(\"Merged DataFrame:\")\nprint(merged_df.head())\n\n# 항목명 확인\nprint(\"항목명 Column:\")\nprint(merged_df['항목명'].head())\n\n# 여가 활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"항목명\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(\"Average Spending:\")\nprint(average_spending)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:26:43.012930Z","iopub.execute_input":"2024-11-15T01:26:43.013441Z","iopub.status.idle":"2024-11-15T01:26:43.425996Z","shell.execute_reply.started":"2024-11-15T01:26:43.013391Z","shell.execute_reply":"2024-11-15T01:26:43.424798Z"}},"outputs":[{"name":"stdout","text":"Activity Codes Melted:\n        ID    rank activity_code\n0  1003001  Q2_1_1          58.0\n1  1003002  Q2_1_1          29.0\n2  1003003  Q2_1_1          84.0\n3  1003004  Q2_1_1          75.0\n4  1003021  Q2_1_1          52.0\nMerged DataFrame:\nEmpty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 항목ID, 항목명, 변수명, 데이터타입]\nIndex: []\n항목명 Column:\nSeries([], Name: 항목명, dtype: object)\nAverage Spending:\nEmpty DataFrame\nColumns: [항목명, amount_spent]\nIndex: []\n","output_type":"stream"}],"execution_count":21},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 공백 제거 및 대소문자 통일\nactivity_codes_melted['activity_code'] = activity_codes_melted['activity_code'].astype(str).str.strip().str.upper()\ncode_description['항목ID'] = code_description['항목ID'].astype(str).str.strip().str.upper()\n\n# 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 여가 활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"항목명\")[\"amount_spent\"].mean().reset_index()\n\n# 사용자 입력 받기\nactivity_name = input(\"여가 활동명을 입력하세요: \")\n\n# 입력된 여가 활동명이 존재하는 경우, 평균 지출 금액 출력\nif activity_name:\n    # 여가 활동명이 데이터프레임에 있는지 확인\n    if activity_name in average_spending['항목명'].values:\n        avg_cost = average_spending.loc[average_spending['항목명'] == activity_name, 'amount_spent'].values[0]\n        print(f\"'{activity_name}'에 대한 평균 지출 금액은 {avg_cost:.2f} 원입니다.\")\n    else:\n        print(f\"'{activity_name}'에 해당하는 활동이 없습니다.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:28:51.524816Z","iopub.execute_input":"2024-11-15T01:28:51.525621Z","iopub.status.idle":"2024-11-15T01:28:54.900127Z","shell.execute_reply.started":"2024-11-15T01:28:51.525570Z","shell.execute_reply":"2024-11-15T01:28:54.898903Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가 활동명을 입력하세요:  골프\n"},{"name":"stdout","text":"'골프'에 해당하는 활동이 없습니다.\n","output_type":"stream"}],"execution_count":23},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 공백 제거 및 대소문자 통일\nactivity_codes_melted['activity_code'] = activity_codes_melted['activity_code'].astype(str).str.strip().str.upper()\ncode_description['항목ID'] = code_description['항목ID'].astype(str).str.strip().str.upper()\n\n# 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 여가 활동명 목록 확인 (대소문자 구분 없이)\nactivity_list = merged_df['항목명'].str.strip().str.lower().unique()\n\n# 여가 활동명 목록 출력 (사용자가 입력해야 할 값들을 정확히 보여줍니다)\nprint(\"여가 활동명 목록:\", activity_list)\n\n# 사용자 입력 받기\nactivity_name = input(\"여가 활동명을 입력하세요: \").strip().lower()\n\n# 입력된 여가 활동명이 존재하는 경우, 평균 지출 금액 출력\nif activity_name:\n    # 여가 활동명이 데이터프레임에 있는지 확인\n    matched_activities = merged_df[merged_df['항목명'].str.strip().str.lower() == activity_name]\n    \n    if not matched_activities.empty:\n        avg_cost = matched_activities['amount_spent'].mean()\n        print(f\"'{activity_name}'에 대한 평균 지출 금액은 {avg_cost:.2f} 원입니다.\")\n    else:\n        print(f\"'{activity_name}'에 해당하는 활동이 없습니다.\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:34:08.211068Z","iopub.execute_input":"2024-11-15T01:34:08.211520Z","iopub.status.idle":"2024-11-15T01:34:11.194510Z","shell.execute_reply.started":"2024-11-15T01:34:08.211478Z","shell.execute_reply":"2024-11-15T01:34:11.193103Z"}},"outputs":[{"name":"stdout","text":"여가 활동명 목록: []\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"여가 활동명을 입력하세요:  축구\n"},{"name":"stdout","text":"'축구'에 해당하는 활동이 없습니다.\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 공백 제거 및 대소문자 통일\nactivity_codes_melted['activity_code'] = activity_codes_melted['activity_code'].astype(str).str.strip().str.upper()\ncode_description['항목ID'] = code_description['항목ID'].astype(str).str.strip().str.upper()\n\n# 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 여가 활동명 목록 가져오기 (대소문자 구분 없이)\nactivity_list = merged_df['항목명'].str.strip().str.lower().unique()\n\n# 여가 활동명 목록 출력\nprint(\"여가 활동명 목록:\")\nfor activity in activity_list:\n    print(activity)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:34:33.697033Z","iopub.execute_input":"2024-11-15T01:34:33.697485Z","iopub.status.idle":"2024-11-15T01:34:33.956265Z","shell.execute_reply.started":"2024-11-15T01:34:33.697444Z","shell.execute_reply":"2024-11-15T01:34:33.954953Z"}},"outputs":[{"name":"stdout","text":"여가 활동명 목록:\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 정리: 각 순위별 지출 금액과 활동 코드를 하나의 데이터프레임으로 병합\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 공백 제거 및 대소문자 통일\nactivity_codes_melted['activity_code'] = activity_codes_melted['activity_code'].astype(str).str.strip().str.upper()\ncode_description['항목ID'] = code_description['항목ID'].astype(str).str.strip().str.upper()\n\n# 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 병합된 데이터 확인\nprint(\"병합된 데이터프레임:\")\nprint(merged_df.head())\n\n# 여가 활동명 목록 가져오기 (대소문자 구분 없이)\nactivity_list = merged_df['항목명'].dropna().str.strip().str.lower().unique()\n\n# 여가 활동명 목록 출력\nprint(\"\\n여가 활동명 목록:\")\nif len(activity_list) > 0:\n    for activity in activity_list:\n        print(activity)\nelse:\n    print(\"여가 활동명이 없습니다.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:35:08.583710Z","iopub.execute_input":"2024-11-15T01:35:08.585193Z","iopub.status.idle":"2024-11-15T01:35:08.844706Z","shell.execute_reply.started":"2024-11-15T01:35:08.585130Z","shell.execute_reply":"2024-11-15T01:35:08.843393Z"}},"outputs":[{"name":"stdout","text":"병합된 데이터프레임:\nEmpty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 항목ID, 항목명, 변수명, 데이터타입]\nIndex: []\n\n여가 활동명 목록:\n여가 활동명이 없습니다.\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 확인\nprint(spending_df.head())\nprint(activity_codes_df.head())\nprint(code_description.head())\n\n# 1. spending_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 3. 활동 코드와 비용 데이터를 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# 4. 'activity_code'와 '항목ID'를 기준으로 활동명을 병합\nmerged_df = pd.merge(merged_df, code_description, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 5. 병합된 데이터 확인\nprint(\"병합된 데이터프레임 예시:\")\nprint(merged_df.head())\n\n# 6. 최종적으로 병합된 데이터프레임을 각 순위별로 여가활동 코드와 비용을 출력\n# 데이터를 피벗하여 1순위, 2순위, 3순위 등으로 각 열에 나누어 출력\npivot_df = merged_df.pivot_table(index=\"ID\", columns=\"rank\", values=[\"activity_code\", \"amount_spent\", \"항목명\"], aggfunc=\"first\")\n\n# 7. 병합된 데이터를 보기 좋게 정리\npivot_df.columns = [f\"{col[0]}_{col[1]}\" for col in pivot_df.columns]\n\n# 8. 결과 출력\nprint(\"\\n병합된 데이터프레임 (최종 결과):\")\nprint(pivot_df)\n\n# 선택적으로 CSV로 저장할 수 있음\n# pivot_df.to_csv(\"merged_activity_spending.csv\", index=True)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:39:17.030050Z","iopub.execute_input":"2024-11-15T01:39:17.030502Z","iopub.status.idle":"2024-11-15T01:39:17.233940Z","shell.execute_reply.started":"2024-11-15T01:39:17.030457Z","shell.execute_reply":"2024-11-15T01:39:17.232538Z"}},"outputs":[{"name":"stdout","text":"        ID  Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N  Q2_5_5_N\n0  1003001         0       0.0       0.0   30000.0     500.0\n1  1003002      2000       0.0    5000.0       0.0   50000.0\n2  1003003         0       0.0   30000.0       0.0   80000.0\n3  1003004         0       0.0   50000.0   50000.0    5000.0\n4  1003021      2000   30000.0   50000.0       0.0       0.0\n        ID  Q2_1_1  Q2_1_2  Q2_1_3  Q2_1_4  Q2_1_5\n0  1003001      58    84.0    59.0    86.0    66.0\n1  1003002      29    58.0    59.0    75.0    86.0\n2  1003003      84    58.0    63.0    68.0    67.0\n3  1003004      75    84.0    86.0    63.0    53.0\n4  1003021      52    64.0    86.0    75.0    71.0\n   항목ID                                              항목명   변수명 데이터타입\n0     1                                           응답자 ID    ID   숫자형\n1     2                                          시부군부 유형   EUP   코드형\n2     3                                             시도권역  AREA   코드형\n3     4                                             주택유형   APT   코드형\n4     5  한 번 이상 참여한 여가활동 - (1) 전시회 관람(미술, 사진, 건축, 디자인 등)  Q1_1   코드형\n병합된 데이터프레임 예시:\nEmpty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 항목ID, 항목명, 변수명, 데이터타입]\nIndex: []\n\n병합된 데이터프레임 (최종 결과):\nEmpty DataFrame\nColumns: []\nIndex: []\n","output_type":"stream"}],"execution_count":29},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 확인\nprint(spending_df.head())\nprint(activity_codes_df.head())\nprint(code_description.head())\n\n# 1. spending_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 3. 활동 코드와 비용 데이터를 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# 4. 여가활동 코드와 항목ID 매칭을 위해 code_description에서 항목ID와 항목명 가져오기\n# 항목ID와 항목명만 필터링\ncode_description_filtered = code_description[['항목ID', '항목명']]\n\n# 5. 'activity_code'와 '항목ID'를 기준으로 활동명 병합\nmerged_df = pd.merge(merged_df, code_description_filtered, left_on=\"activity_code\", right_on=\"항목ID\", how=\"left\")\n\n# 6. 병합된 데이터 확인\nprint(\"병합된 데이터프레임 예시:\")\nprint(merged_df.head())\n\n# 7. 최종적으로 병합된 데이터를 각 순위별로 여가활동 코드와 비용을 출력\n# 데이터를 피벗하여 1순위, 2순위, 3순위 등으로 각 열에 나누어 출력\npivot_df = merged_df.pivot_table(index=\"ID\", columns=\"rank\", values=[\"activity_code\", \"amount_spent\", \"항목명\"], aggfunc=\"first\")\n\n# 8. 병합된 데이터를 보기 좋게 정리\npivot_df.columns = [f\"{col[0]}_{col[1]}\" for col in pivot_df.columns]\n\n# 9. 결과 출력\nprint(\"\\n병합된 데이터프레임 (최종 결과):\")\nprint(pivot_df)\n\n# 선택적으로 CSV로 저장할 수 있음\n# pivot_df.to_csv(\"merged_activity_spending.csv\", index=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:40:42.861138Z","iopub.execute_input":"2024-11-15T01:40:42.861931Z","iopub.status.idle":"2024-11-15T01:40:43.059374Z","shell.execute_reply.started":"2024-11-15T01:40:42.861884Z","shell.execute_reply":"2024-11-15T01:40:43.058175Z"}},"outputs":[{"name":"stdout","text":"        ID  Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N  Q2_5_5_N\n0  1003001         0       0.0       0.0   30000.0     500.0\n1  1003002      2000       0.0    5000.0       0.0   50000.0\n2  1003003         0       0.0   30000.0       0.0   80000.0\n3  1003004         0       0.0   50000.0   50000.0    5000.0\n4  1003021      2000   30000.0   50000.0       0.0       0.0\n        ID  Q2_1_1  Q2_1_2  Q2_1_3  Q2_1_4  Q2_1_5\n0  1003001      58    84.0    59.0    86.0    66.0\n1  1003002      29    58.0    59.0    75.0    86.0\n2  1003003      84    58.0    63.0    68.0    67.0\n3  1003004      75    84.0    86.0    63.0    53.0\n4  1003021      52    64.0    86.0    75.0    71.0\n   항목ID                                              항목명   변수명 데이터타입\n0     1                                           응답자 ID    ID   숫자형\n1     2                                          시부군부 유형   EUP   코드형\n2     3                                             시도권역  AREA   코드형\n3     4                                             주택유형   APT   코드형\n4     5  한 번 이상 참여한 여가활동 - (1) 전시회 관람(미술, 사진, 건축, 디자인 등)  Q1_1   코드형\n병합된 데이터프레임 예시:\nEmpty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 항목ID, 항목명]\nIndex: []\n\n병합된 데이터프레임 (최종 결과):\nEmpty DataFrame\nColumns: []\nIndex: []\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"import pandas as pd\n\n# 데이터 불러오기\nspending_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\ncode_description = pd.read_excel(\"/kaggle/input/user-saying/_2023_.xlsx\")\n\n# 데이터 확인\nprint(\"spending_df:\")\nprint(spending_df.head())\nprint(\"\\nactivity_codes_df:\")\nprint(activity_codes_df.head())\nprint(\"\\ncode_description:\")\nprint(code_description.head())\n\n# 1. spending_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\nspending_melted = spending_df.melt(id_vars=['ID'], \n                                   value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                                   var_name='rank', value_name='amount_spent')\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 3. 'activity_code'와 'rank'를 기준으로 지출 금액과 활동 코드 병합\nmerged_df = pd.merge(spending_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# 4. code_description에서 '변수명'과 '항목명'만 필터링 (user_act.csv와 변수명이 일치하는 것만)\ncode_description_filtered = code_description[code_description['변수명'].isin(activity_codes_df.columns[1:])][['변수명', '항목명']]\n\n# 5. 'rank'와 '변수명'을 기준으로 병합하여 여가활동명을 가져오기\nmerged_df = pd.merge(merged_df, code_description_filtered, left_on='rank', right_on='변수명', how='left')\n\n# 병합된 데이터 확인\nprint(\"\\n병합된 데이터프레임:\")\nprint(merged_df.head())\n\n# 6. 여가활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"항목명\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(\"\\n여가활동별 평균 지출 금액:\")\nprint(average_spending)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:43:43.778532Z","iopub.execute_input":"2024-11-15T01:43:43.779070Z","iopub.status.idle":"2024-11-15T01:43:43.976021Z","shell.execute_reply.started":"2024-11-15T01:43:43.779025Z","shell.execute_reply":"2024-11-15T01:43:43.974805Z"}},"outputs":[{"name":"stdout","text":"spending_df:\n        ID  Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N  Q2_5_5_N\n0  1003001         0       0.0       0.0   30000.0     500.0\n1  1003002      2000       0.0    5000.0       0.0   50000.0\n2  1003003         0       0.0   30000.0       0.0   80000.0\n3  1003004         0       0.0   50000.0   50000.0    5000.0\n4  1003021      2000   30000.0   50000.0       0.0       0.0\n\nactivity_codes_df:\n        ID  Q2_1_1  Q2_1_2  Q2_1_3  Q2_1_4  Q2_1_5\n0  1003001      58    84.0    59.0    86.0    66.0\n1  1003002      29    58.0    59.0    75.0    86.0\n2  1003003      84    58.0    63.0    68.0    67.0\n3  1003004      75    84.0    86.0    63.0    53.0\n4  1003021      52    64.0    86.0    75.0    71.0\n\ncode_description:\n   항목ID                                              항목명   변수명 데이터타입\n0     1                                           응답자 ID    ID   숫자형\n1     2                                          시부군부 유형   EUP   코드형\n2     3                                             시도권역  AREA   코드형\n3     4                                             주택유형   APT   코드형\n4     5  한 번 이상 참여한 여가활동 - (1) 전시회 관람(미술, 사진, 건축, 디자인 등)  Q1_1   코드형\n\n병합된 데이터프레임:\nEmpty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, 변수명, 항목명]\nIndex: []\n\n여가활동별 평균 지출 금액:\nEmpty DataFrame\nColumns: [항목명, amount_spent]\nIndex: []\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"import pandas as pd\n\n# _base.xlsx 파일 불러오기\nbase_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 필요한 컬럼 (여가 활동 코드와 이름만) 선택\nbase_df = base_df[['항목ID', '항목명']]\n\n# user-actt/user_act.csv 파일 불러오기\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# cost.csv 파일 불러오기\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\n\n# 1. cost_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\ncost_melted = cost_df.melt(id_vars=['ID'], \n                           value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                           var_name='rank', value_name='amount_spent')\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 3. 'activity_code'와 'rank'를 기준으로 지출 금액과 활동 코드 병합\nmerged_df = pd.merge(cost_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# 4. '_base.xlsx'에서 가져온 여가 활동 코드에 대한 이름을 병합\nmerged_df = pd.merge(merged_df, base_df, left_on='activity_code', right_on='항목ID', how='left')\n\n# 5. 여가활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"항목명\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(\"\\n여가활동별 평균 지출 금액:\")\nprint(average_spending)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:48:51.550951Z","iopub.execute_input":"2024-11-15T01:48:51.551370Z","iopub.status.idle":"2024-11-15T01:48:52.309593Z","shell.execute_reply.started":"2024-11-15T01:48:51.551331Z","shell.execute_reply":"2024-11-15T01:48:52.308025Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Cell \u001b[0;32mIn[33], line 7\u001b[0m\n\u001b[1;32m      4\u001b[0m base_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_excel(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m/kaggle/input/code-say/_base.xlsx\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m      6\u001b[0m \u001b[38;5;66;03m# 필요한 컬럼 (여가 활동 코드와 이름만) 선택\u001b[39;00m\n\u001b[0;32m----> 7\u001b[0m base_df \u001b[38;5;241m=\u001b[39m \u001b[43mbase_df\u001b[49m\u001b[43m[\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m항목ID\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m항목명\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# user-actt/user_act.csv 파일 불러오기\u001b[39;00m\n\u001b[1;32m     10\u001b[0m activity_codes_df \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m/kaggle/input/user-actt/user_act.csv\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/frame.py:4108\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m is_iterator(key):\n\u001b[1;32m   4107\u001b[0m         key \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(key)\n\u001b[0;32m-> 4108\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_indexer_strict\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mcolumns\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m[\u001b[38;5;241m1\u001b[39m]\n\u001b[1;32m   4110\u001b[0m \u001b[38;5;66;03m# take() does not accept boolean indexers\u001b[39;00m\n\u001b[1;32m   4111\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(indexer, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdtype\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mbool\u001b[39m:\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6200\u001b[0m, in \u001b[0;36mIndex._get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6197\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m   6198\u001b[0m     keyarr, indexer, new_indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reindex_non_unique(keyarr)\n\u001b[0;32m-> 6200\u001b[0m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_raise_if_missing\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeyarr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mindexer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis_name\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6202\u001b[0m keyarr \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtake(indexer)\n\u001b[1;32m   6203\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   6204\u001b[0m     \u001b[38;5;66;03m# GH 42790 - Preserve name from an Index\u001b[39;00m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/indexes/base.py:6249\u001b[0m, in \u001b[0;36mIndex._raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m nmissing:\n\u001b[1;32m   6248\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m nmissing \u001b[38;5;241m==\u001b[39m \u001b[38;5;28mlen\u001b[39m(indexer):\n\u001b[0;32m-> 6249\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mNone of [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mkey\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m] are in the [\u001b[39m\u001b[38;5;132;01m{\u001b[39;00maxis_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m]\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   6251\u001b[0m     not_found \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mlist\u001b[39m(ensure_index(key)[missing_mask\u001b[38;5;241m.\u001b[39mnonzero()[\u001b[38;5;241m0\u001b[39m]]\u001b[38;5;241m.\u001b[39munique())\n\u001b[1;32m   6252\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mnot_found\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m not in index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['항목ID', '항목명'], dtype='object')] are in the [columns]\""],"ename":"KeyError","evalue":"\"None of [Index(['항목ID', '항목명'], dtype='object')] are in the [columns]\"","output_type":"error"}],"execution_count":33},{"cell_type":"code","source":"import pandas as pd\n\n# _base.xlsx 파일 불러오기 (활동 코드와 활동명)\nbase_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# _base.xlsx의 첫 번째 행을 제외한 데이터를 컬럼명에 맞춰 변형\nbase_df = base_df.melt(id_vars=['ID'], \n                       value_vars=[col for col in base_df.columns if col != 'ID'], \n                       var_name='rank', value_name='activity_name')\n\n# user-actt/user_act.csv 파일 불러오기 (사용자별 여가 활동 코드)\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# user-cost/cost.csv 파일 불러오기 (사용자별 여가 활동에 대한 비용)\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\n\n# 1. cost_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\ncost_melted = cost_df.melt(id_vars=['ID'], \n                           value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                           var_name='rank', value_name='amount_spent')\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# 3. 'activity_code'와 'rank'를 기준으로 지출 금액과 활동 코드 병합\nmerged_df = pd.merge(cost_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# 4. 'activity_code'와 'rank'를 기준으로 활동 이름을 병합 (base_df의 'activity_name' 컬럼과)\nmerged_df = pd.merge(merged_df, base_df, left_on='activity_code', right_on='value', how='left')\n\n# 5. 여가활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"activity_name\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(\"\\n여가활동별 평균 지출 금액:\")\nprint(average_spending)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:50:32.112741Z","iopub.execute_input":"2024-11-15T01:50:32.113878Z","iopub.status.idle":"2024-11-15T01:50:32.270990Z","shell.execute_reply.started":"2024-11-15T01:50:32.113810Z","shell.execute_reply":"2024-11-15T01:50:32.269278Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_30/564688250.py\u001b[0m in \u001b[0;36m?\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0;31m# 3. 'activity_code'와 'rank'를 기준으로 지출 금액과 활동 코드 병합\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0mmerged_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcost_melted\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivity_codes_melted\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mon\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'ID'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rank'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;31m# 4. 'activity_code'와 'rank'를 기준으로 활동 이름을 병합 (base_df의 'activity_name' 컬럼과)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 31\u001b[0;31m \u001b[0mmerged_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmerge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmerged_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbase_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mleft_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'activity_code'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright_on\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'value'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'left'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     32\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     33\u001b[0m \u001b[0;31m# 5. 여가활동별 평균 지출 금액 계산\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0maverage_spending\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmerged_df\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgroupby\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"activity_name\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"amount_spent\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreset_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, copy, indicator, validate)\u001b[0m\n\u001b[1;32m    166\u001b[0m             \u001b[0mvalidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidate\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m             \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    168\u001b[0m         )\n\u001b[1;32m    169\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 170\u001b[0;31m         op = _MergeOperation(\n\u001b[0m\u001b[1;32m    171\u001b[0m             \u001b[0mleft_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    172\u001b[0m             \u001b[0mright_df\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m             \u001b[0mhow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mhow\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(self, left, right, how, on, left_on, right_on, left_index, right_index, sort, suffixes, indicator, validate)\u001b[0m\n\u001b[1;32m    790\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mright_join_keys\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    791\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin_names\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    792\u001b[0m             \u001b[0mleft_drop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m             \u001b[0mright_drop\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 794\u001b[0;31m         ) = self._get_merge_keys()\n\u001b[0m\u001b[1;32m    795\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    796\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mleft_drop\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    797\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_drop_labels_or_levels\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft_drop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/reshape/merge.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1293\u001b[0m                         \u001b[0;31m# Then we're either Hashable or a wrong-length arraylike,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1294\u001b[0m                         \u001b[0;31m#  the latter of which will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1295\u001b[0m                         \u001b[0mrk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mHashable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1296\u001b[0m                         \u001b[0;32mif\u001b[0m \u001b[0mrk\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1297\u001b[0;31m                             \u001b[0mright_keys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_label_or_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1298\u001b[0m                         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1299\u001b[0m                             \u001b[0;31m# work-around for merge_asof(right_index=True)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1300\u001b[0m                             \u001b[0mright_keys\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mright\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/opt/conda/lib/python3.10/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m?\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1907\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mother_axes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1908\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_level_reference\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1909\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_level_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1910\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1911\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1912\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1913\u001b[0m         \u001b[0;31m# Check for duplicates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1914\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mvalues\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mndim\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'value'"],"ename":"KeyError","evalue":"'value'","output_type":"error"}],"execution_count":36},{"cell_type":"code","source":"import pandas as pd\n\n# _base.xlsx 파일 불러오기 (활동 코드와 활동명)\nbase_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# _base.xlsx의 첫 번째 행을 제외한 데이터를 컬럼명에 맞춰 변형\nbase_df = base_df.melt(id_vars=['ID'], \n                       value_vars=[col for col in base_df.columns if col != 'ID'], \n                       var_name='rank', value_name='activity_name')\n\n# base_df 확인\nprint(\"base_df head:\", base_df.head())\n\n# user-actt/user_act.csv 파일 불러오기 (사용자별 여가 활동 코드)\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# user-cost/cost.csv 파일 불러오기 (사용자별 여가 활동에 대한 비용)\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\n\n# 1. cost_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\ncost_melted = cost_df.melt(id_vars=['ID'], \n                           value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                           var_name='rank', value_name='amount_spent')\n\n# cost_melted 확인\nprint(\"cost_melted head:\", cost_melted.head())\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# activity_codes_melted 확인\nprint(\"activity_codes_melted head:\", activity_codes_melted.head())\n\n# 3. 'activity_code'와 'rank'를 기준으로 지출 금액과 활동 코드 병합\nmerged_df = pd.merge(cost_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# merged_df 확인\nprint(\"merged_df head:\", merged_df.head())\n\n# 4. 'activity_code'와 'rank'를 기준으로 활동 이름을 병합 (base_df의 'activity_name' 컬럼과)\nmerged_df = pd.merge(merged_df, base_df[['rank', 'activity_name']], on='rank', how='left')\n\n# merged_df 확인 (활동 이름이 제대로 매칭되는지)\nprint(\"final merged_df head:\", merged_df.head())\n\n# 5. 여가활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"activity_name\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(\"\\n여가활동별 평균 지출 금액:\")\nprint(average_spending)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:51:32.865639Z","iopub.execute_input":"2024-11-15T01:51:32.866321Z","iopub.status.idle":"2024-11-15T01:51:33.003679Z","shell.execute_reply.started":"2024-11-15T01:51:32.866266Z","shell.execute_reply":"2024-11-15T01:51:33.002250Z"}},"outputs":[{"name":"stdout","text":"base_df head:      ID    rank              activity_name\n0  Q1_1  응답자 ID  전시회 관람(미술, 사진, 건축, 디자인 등)\n1  Q1_2  응답자 ID                     박물관 관람\n2  Q1_3  응답자 ID       음악연주회 관람(클래식, 오페라 등)\n3  Q1_4  응답자 ID      전통예술공연 관람(국악, 민속놀이 등)\n4  Q1_5  응답자 ID            연극공연 관람(뮤지컬 포함)\ncost_melted head:         ID      rank  amount_spent\n0  1003001  Q2_5_1_N           0.0\n1  1003002  Q2_5_1_N        2000.0\n2  1003003  Q2_5_1_N           0.0\n3  1003004  Q2_5_1_N           0.0\n4  1003021  Q2_5_1_N        2000.0\nactivity_codes_melted head:         ID    rank  activity_code\n0  1003001  Q2_1_1           58.0\n1  1003002  Q2_1_1           29.0\n2  1003003  Q2_1_1           84.0\n3  1003004  Q2_1_1           75.0\n4  1003021  Q2_1_1           52.0\nmerged_df head: Empty DataFrame\nColumns: [ID, rank, amount_spent, activity_code]\nIndex: []\nfinal merged_df head: Empty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, activity_name]\nIndex: []\n\n여가활동별 평균 지출 금액:\nEmpty DataFrame\nColumns: [activity_name, amount_spent]\nIndex: []\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"import pandas as pd\n\n# _base.xlsx 파일 불러오기 (활동 코드와 활동명)\nbase_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# _base.xlsx의 첫 번째 행을 제외한 데이터를 컬럼명에 맞춰 변형\nbase_df = base_df.melt(id_vars=['ID'], \n                       value_vars=[col for col in base_df.columns if col != 'ID'], \n                       var_name='rank', value_name='activity_name')\n\n# base_df 확인\nprint(\"base_df head:\", base_df.head())\n\n# user-actt/user_act.csv 파일 불러오기 (사용자별 여가 활동 코드)\nactivity_codes_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")\n\n# user-cost/cost.csv 파일 불러오기 (사용자별 여가 활동에 대한 비용)\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\n\n# 1. cost_df를 'melt'하여 순위별 지출 금액을 긴 형태로 변환\ncost_melted = cost_df.melt(id_vars=['ID'], \n                           value_vars=['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N'], \n                           var_name='rank', value_name='amount_spent')\n\n# cost_melted 확인\nprint(\"cost_melted head:\", cost_melted.head())\n\n# 2. activity_codes_df를 'melt'하여 순위별 활동 코드를 긴 형태로 변환\nactivity_codes_melted = activity_codes_df.melt(id_vars=['ID'], \n                                               value_vars=['Q2_1_1', 'Q2_1_2', 'Q2_1_3', 'Q2_1_4', 'Q2_1_5'], \n                                               var_name='rank', value_name='activity_code')\n\n# activity_codes_melted 확인\nprint(\"activity_codes_melted head:\", activity_codes_melted.head())\n\n# 3. 'activity_code'와 'rank'를 기준으로 지출 금액과 활동 코드 병합\nmerged_df = pd.merge(cost_melted, activity_codes_melted, on=['ID', 'rank'])\n\n# merged_df 확인\nprint(\"merged_df head:\", merged_df.head())\n\n# 4. 'activity_code'와 'rank'를 기준으로 활동 이름을 병합 (base_df의 'activity_name' 컬럼과)\nmerged_df = pd.merge(merged_df, base_df[['rank', 'activity_name']], on='rank', how='left')\n\n# merged_df 확인 (활동 이름이 제대로 매칭되는지)\nprint(\"final merged_df head:\", merged_df.head())\n\n# 5. 여가활동별 평균 지출 금액 계산\naverage_spending = merged_df.groupby(\"activity_name\")[\"amount_spent\"].mean().reset_index()\n\n# 결과 출력\nprint(\"\\n여가활동별 평균 지출 금액:\")\nprint(average_spending)\n\n# 사용자 입력 받기: 특정 여가활동 입력\nuser_activity = input(\"여가활동명을 입력하세요: \")\n\n# 입력된 여가활동에 대한 평균 비용 찾기\nmatching_activity = average_spending[average_spending['activity_name'] == user_activity]\n\n# 여가활동명에 해당하는 평균 비용 출력\nif not matching_activity.empty:\n    print(f\"{user_activity}의 평균 비용은 {matching_activity['amount_spent'].values[0]:.2f}입니다.\")\nelse:\n    print(f\"'{user_activity}'에 해당하는 활동이 없습니다.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:52:38.902205Z","iopub.execute_input":"2024-11-15T01:52:38.902663Z","iopub.status.idle":"2024-11-15T01:52:42.315829Z","shell.execute_reply.started":"2024-11-15T01:52:38.902619Z","shell.execute_reply":"2024-11-15T01:52:42.314709Z"}},"outputs":[{"name":"stdout","text":"base_df head:      ID    rank              activity_name\n0  Q1_1  응답자 ID  전시회 관람(미술, 사진, 건축, 디자인 등)\n1  Q1_2  응답자 ID                     박물관 관람\n2  Q1_3  응답자 ID       음악연주회 관람(클래식, 오페라 등)\n3  Q1_4  응답자 ID      전통예술공연 관람(국악, 민속놀이 등)\n4  Q1_5  응답자 ID            연극공연 관람(뮤지컬 포함)\ncost_melted head:         ID      rank  amount_spent\n0  1003001  Q2_5_1_N           0.0\n1  1003002  Q2_5_1_N        2000.0\n2  1003003  Q2_5_1_N           0.0\n3  1003004  Q2_5_1_N           0.0\n4  1003021  Q2_5_1_N        2000.0\nactivity_codes_melted head:         ID    rank  activity_code\n0  1003001  Q2_1_1           58.0\n1  1003002  Q2_1_1           29.0\n2  1003003  Q2_1_1           84.0\n3  1003004  Q2_1_1           75.0\n4  1003021  Q2_1_1           52.0\nmerged_df head: Empty DataFrame\nColumns: [ID, rank, amount_spent, activity_code]\nIndex: []\nfinal merged_df head: Empty DataFrame\nColumns: [ID, rank, amount_spent, activity_code, activity_name]\nIndex: []\n\n여가활동별 평균 지출 금액:\nEmpty DataFrame\nColumns: [activity_name, amount_spent]\nIndex: []\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"여가활동명을 입력하세요:  축구\n"},{"name":"stdout","text":"'축구'에 해당하는 활동이 없습니다.\n","output_type":"stream"}],"execution_count":39},{"cell_type":"code","source":"# 엑셀 파일을 읽어옵니다\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")  # 파일 경로를 지정하세요\n\n# 데이터프레임을 리스트로 변환합니다\ndata_list = code_df.values.tolist()\n\n# code_val_dic에 키-값 형태로 코드와 정보를 저장\ncode_val_dic = {}\nval_code_dic = {}\n\nfor key, value in data_list:\n    code_val_dic[key] = value\nfor key, value in data_list:\n    val_code_dic[value] = key\n\n# print(code_val_dic)\n# print(val_code_dic)\ncode_val_dic","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:53:18.805302Z","iopub.execute_input":"2024-11-15T01:53:18.806563Z","iopub.status.idle":"2024-11-15T01:53:18.850129Z","shell.execute_reply.started":"2024-11-15T01:53:18.806509Z","shell.execute_reply":"2024-11-15T01:53:18.848819Z"}},"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"{'Q1_1': '전시회 관람(미술, 사진, 건축, 디자인 등)',\n 'Q1_2': '박물관 관람',\n 'Q1_3': '음악연주회 관람(클래식, 오페라 등)',\n 'Q1_4': '전통예술공연 관람(국악, 민속놀이 등)',\n 'Q1_5': '연극공연 관람(뮤지컬 포함)',\n 'Q1_6': '무용공연 관람',\n 'Q1_7': '영화관람',\n 'Q1_8': '연예공연 관람(쇼, 콘서트, 마술 쇼 등)',\n 'Q1_9': '문학행사참여',\n 'Q1_10': '글짓기/독서토론',\n 'Q1_11': '미술활동(그림, 서예, 조각, 디자인, 도예, 만화 등)',\n 'Q1_12': '악기연주/노래교실',\n 'Q1_13': '전통예술 배우기(사물놀이, 줄타기 등)',\n 'Q1_14': '사진촬영(디지털카메라 포함)',\n 'Q1_15': '춤/무용(발레, 한국무용, 현대무용, 방송댄스, 스트릿댄스, 비보잉 등)',\n 'Q1_16': '스포츠 경기 직접관람- 경기장방문관람(축구, 야구,농구, 배구 등)',\n 'Q1_17': '스포츠 경기 간접관람- TV, DMB를 통한관람(축구, 야구, 농구, 배구 등)',\n 'Q1_18': '격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)',\n 'Q1_19': '온라인게임 경기관람(e-스포츠 경기 포함)',\n 'Q1_20': '농구, 배구, 야구, 축구, 족구',\n 'Q1_21': '테니스, 스쿼시',\n 'Q1_22': '당구/포켓볼',\n 'Q1_23': '볼링, 탁구',\n 'Q1_24': '골프',\n 'Q1_25': '수영',\n 'Q1_26': '윈드서핑, 수상스키, 스킨스쿠버다이빙, 래프팅, 요트',\n 'Q1_27': '스노보드, 스키 등',\n 'Q1_28': '아이스스케이트, 아이스하키 등',\n 'Q1_29': '헬스(보디빌딩)/에어로빅',\n 'Q1_30': '요가/필라테스/태보',\n 'Q1_31': '배드민턴/줄넘기/맨손, 스트레칭 체조/훌라후프',\n 'Q1_32': '육상/조깅/속보',\n 'Q1_33': '격투 스포츠(태권도, 유도, 합기도, 검도, 권투 등)',\n 'Q1_34': '댄스스포츠(탱고, 왈츠, 자이브, 맘보,폴카, 차차차등)',\n 'Q1_35': '사이클링/산악자전거',\n 'Q1_36': '인라인스케이트',\n 'Q1_37': '승마, 암벽등반, 철인삼종경기, 서바이벌',\n 'Q1_38': '문화유적방문(고궁, 절, 유적지 등)',\n 'Q1_39': '자연명승 및 풍경 관람',\n 'Q1_40': '삼림욕',\n 'Q1_41': '국내캠핑',\n 'Q1_42': '해외여행',\n 'Q1_43': '소풍/야유회',\n 'Q1_44': '온천/해수욕',\n 'Q1_45': '유람선 타기',\n 'Q1_46': '테마파크가기/놀이공원/동물원/식물원 가기',\n 'Q1_47': '지역축제 참가',\n 'Q1_48': '자동차 드라이브',\n 'Q1_49': '수집활동(스크랩 포함)',\n 'Q1_50': '생활공예(십자수, 비즈공예, D.I.Y, 꽃꽂이 등)',\n 'Q1_51': '요리하기/다도',\n 'Q1_52': '반려동물 돌보기',\n 'Q1_53': '노래방 가기',\n 'Q1_54': '인테리어(집, 자동차 등)',\n 'Q1_55': '등산',\n 'Q1_56': '낚시',\n 'Q1_57': '홈페이지/블로그 관리',\n 'Q1_58': '인터넷 검색/1인 미디어 제작/SNS/영상편집',\n 'Q1_59': '게임(온라인/모바일/콘솔게임 등)',\n 'Q1_60': '보드게임/퍼즐/큐브 맞추기',\n 'Q1_61': '바둑/장기/체스',\n 'Q1_62': '겜블(경마, 경륜, 카지노, 카드놀이, 고스톱, 마작 등)/복권구입',\n 'Q1_63': '쇼핑/외식',\n 'Q1_64': '음주',\n 'Q1_65': '독서(웹소설 포함)',\n 'Q1_66': '만화보기(웹툰 포함)',\n 'Q1_67': '미용(피부관리, 헤어관리, 네일아트, 마사지, 성형 등)',\n 'Q1_68': '어학/기술/자격증 취득 공부/학원 등 이용',\n 'Q1_69': '이색/테마카페 체험(방탈출, VR, 낚시카페 등)',\n 'Q1_70': '원예(화분, 화단가꾸기 등)',\n 'Q1_71': '산책 및 걷기',\n 'Q1_72': '목욕/사우나/찜질방',\n 'Q1_73': '낮잠',\n 'Q1_74': 'TV시청(IPTV 포함)',\n 'Q1_75': '모바일 컨텐츠, 동영상, VOD 시청, OTT 시청',\n 'Q1_76': '라디오/팟캐스트 청취',\n 'Q1_77': '음악 감상',\n 'Q1_78': '신문/잡지보기',\n 'Q1_79': '아무것도 안 하기',\n 'Q1_80': '사회봉사활동',\n 'Q1_81': '종교활동',\n 'Q1_82': '클럽/나이트/디스코/캬바레 가기',\n 'Q1_83': '가족 및 친지방문',\n 'Q1_84': '잡담/통화하기/문자보내기(모바일 메신저 메시지 사용 포함)',\n 'Q1_85': '계모임/동창회/사교(파티)모임',\n 'Q1_86': '친구만남/이성교제/미팅/소개팅',\n 'Q1_87': '동호회 모임',\n 'Q1_88': '위에서 분류되지 않은 기타 여가활동',\n 'Q1_89': '독서/만화책(웹툰)보기(2014,2016,2018)',\n 'Q1_90': '이성교제(데이트)/미팅/소개팅(2014,2016,2018)',\n 'Q1_91': '친구만남/동호회 모임(2014,2016,2018)'}"},"metadata":{}}],"execution_count":40},{"cell_type":"code","source":"# 파일 읽어오기 - 에러발생시 현재 파일과 상대파일 경로 꼭! 재확인!\ndb1_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\n\n# 우리가 가진 데이터에서 base값은 91번컬럼까지있으니 확인!\nbase_df = db1_df.iloc[:,:5]\nculture_df = db1_df.iloc[:,1:]\n\ndisplay(base_df.head())\ndisplay(culture_df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:55:22.216000Z","iopub.execute_input":"2024-11-15T01:55:22.216779Z","iopub.status.idle":"2024-11-15T01:55:22.259503Z","shell.execute_reply.started":"2024-11-15T01:55:22.216734Z","shell.execute_reply":"2024-11-15T01:55:22.258349Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"        ID  Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N\n0  1003001         0       0.0       0.0   30000.0\n1  1003002      2000       0.0    5000.0       0.0\n2  1003003         0       0.0   30000.0       0.0\n3  1003004         0       0.0   50000.0   50000.0\n4  1003021      2000   30000.0   50000.0       0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Q2_5_1_N</th>\n      <th>Q2_5_2_N</th>\n      <th>Q2_5_3_N</th>\n      <th>Q2_5_4_N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1003001</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1003002</td>\n      <td>2000</td>\n      <td>0.0</td>\n      <td>5000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1003003</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1003004</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n      <td>50000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1003021</td>\n      <td>2000</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"   Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N  Q2_5_5_N\n0         0       0.0       0.0   30000.0     500.0\n1      2000       0.0    5000.0       0.0   50000.0\n2         0       0.0   30000.0       0.0   80000.0\n3         0       0.0   50000.0   50000.0    5000.0\n4      2000   30000.0   50000.0       0.0       0.0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Q2_5_1_N</th>\n      <th>Q2_5_2_N</th>\n      <th>Q2_5_3_N</th>\n      <th>Q2_5_4_N</th>\n      <th>Q2_5_5_N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>500.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2000</td>\n      <td>0.0</td>\n      <td>5000.0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>0.0</td>\n      <td>80000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n      <td>50000.0</td>\n      <td>5000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2000</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"# culture_df에도 ID(유저) 추가 - 추후 맵핑위해서!\nculture_df['ID'] = db1_df['ID']\n\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\nculture_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T01:55:35.530035Z","iopub.execute_input":"2024-11-15T01:55:35.530447Z","iopub.status.idle":"2024-11-15T01:55:35.555070Z","shell.execute_reply.started":"2024-11-15T01:55:35.530408Z","shell.execute_reply":"2024-11-15T01:55:35.553782Z"}},"outputs":[{"execution_count":47,"output_type":"execute_result","data":{"text/plain":"            ID  Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N  Q2_5_5_N\n0      1003001         0       0.0       0.0   30000.0     500.0\n1      1003002      2000       0.0    5000.0       0.0   50000.0\n2      1003003         0       0.0   30000.0       0.0   80000.0\n3      1003004         0       0.0   50000.0   50000.0    5000.0\n4      1003021      2000   30000.0   50000.0       0.0       0.0\n...        ...       ...       ...       ...       ...       ...\n10035  2505067     30000   30000.0    2000.0   30000.0   50000.0\n10036  2505068     20000   30000.0   20000.0   20000.0   30000.0\n10037  2505069     20000   30000.0   50000.0   20000.0    1000.0\n10038  2505070     30000    1000.0   30000.0   30000.0   10000.0\n10039  2505071     20000   20000.0    5000.0   20000.0   30000.0\n\n[10040 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Q2_5_1_N</th>\n      <th>Q2_5_2_N</th>\n      <th>Q2_5_3_N</th>\n      <th>Q2_5_4_N</th>\n      <th>Q2_5_5_N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1003001</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>500.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1003002</td>\n      <td>2000</td>\n      <td>0.0</td>\n      <td>5000.0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1003003</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>0.0</td>\n      <td>80000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1003004</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n      <td>50000.0</td>\n      <td>5000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1003021</td>\n      <td>2000</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>10035</th>\n      <td>2505067</td>\n      <td>30000</td>\n      <td>30000.0</td>\n      <td>2000.0</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n    </tr>\n    <tr>\n      <th>10036</th>\n      <td>2505068</td>\n      <td>20000</td>\n      <td>30000.0</td>\n      <td>20000.0</td>\n      <td>20000.0</td>\n      <td>30000.0</td>\n    </tr>\n    <tr>\n      <th>10037</th>\n      <td>2505069</td>\n      <td>20000</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n      <td>20000.0</td>\n      <td>1000.0</td>\n    </tr>\n    <tr>\n      <th>10038</th>\n      <td>2505070</td>\n      <td>30000</td>\n      <td>1000.0</td>\n      <td>30000.0</td>\n      <td>30000.0</td>\n      <td>10000.0</td>\n    </tr>\n    <tr>\n      <th>10039</th>\n      <td>2505071</td>\n      <td>20000</td>\n      <td>20000.0</td>\n      <td>5000.0</td>\n      <td>20000.0</td>\n      <td>30000.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10040 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":47},{"cell_type":"code","source":"# 엑셀 파일을 읽어옵니다\ncode_culture_df = pd.read_excel(\"/kaggle/input/leisure-type/.xlsx\")  # 파일 경로를 지정하세요\n\n# 데이터프레임을 리스트로 변환합니다\nculture_data_list = code_culture_df.values.tolist()\n\n# code_val_dic에 키-값 형태로 코드와 정보를 저장\nculture_code_val_dic = {}\n\nfor key, value in culture_data_list:\n    culture_code_val_dic[key] = value\n\nculture_code_val_dic","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:00:50.297029Z","iopub.execute_input":"2024-11-15T02:00:50.297520Z","iopub.status.idle":"2024-11-15T02:00:50.343643Z","shell.execute_reply.started":"2024-11-15T02:00:50.297465Z","shell.execute_reply":"2024-11-15T02:00:50.342367Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"{1: ' 전시회 관람(미술, 사진, 건축, 디자인 등)',\n 2: ' 박물관 관람',\n 3: ' 음악연주회 관람(클래식, 오페라 등)',\n 4: ' 전통예술공연 관람(국악, 민속놀이 등)',\n 5: ' 연극공연 관람(뮤지컬 포함)',\n 6: ' 무용공연 관람',\n 7: ' 영화관람',\n 8: ' 연예공연 관람(쇼, 콘서트, 마술 쇼 등)',\n 9: ' 문학행사참여',\n 10: ' 글짓기/독서토론',\n 11: ' 미술활동(그림, 서예, 조각, 디자인, 도예, 만화 등)',\n 12: ' 악기연주/노래교실',\n 13: ' 전통예술 배우기(사물놀이, 줄타기 등)',\n 14: ' 사진촬영(디지털카메라 포함)',\n 15: ' 춤/무용(발레, 한국무용, 현대무용, 방송댄스, 스트릿댄스, 비보잉 등)',\n 16: ' 스포츠 경기 직접관람- 경기장방문관람(축구, 야구,농구, 배구 등)',\n 17: ' 스포츠 경기 간접관람- TV, DMB를 통한관람(축구, 야구, 농구, 배구 등)',\n 18: ' 격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)',\n 19: ' 온라인게임 경기관람(e-스포츠 경기 포함)',\n 20: ' 농구, 배구, 야구, 축구, 족구',\n 21: ' 테니스, 스쿼시',\n 22: ' 당구/포켓볼',\n 23: ' 볼링, 탁구',\n 24: ' 골프',\n 25: ' 수영',\n 26: ' 윈드서핑, 수상스키, 스킨스쿠버다이빙, 래프팅, 요트',\n 27: ' 스노보드, 스키 등',\n 28: ' 아이스스케이트, 아이스하키 등',\n 29: ' 헬스(보디빌딩)/에어로빅',\n 30: ' 요가/필라테스/태보',\n 31: ' 배드민턴/줄넘기/맨손, 스트레칭 체조/훌라후프',\n 32: ' 육상/조깅/속보',\n 33: ' 격투 스포츠(태권도, 유도, 합기도, 검도, 권투 등)',\n 34: ' 댄스스포츠(탱고, 왈츠, 자이브, 맘보,폴카, 차차차등)',\n 35: ' 사이클링/산악자전거',\n 36: ' 인라인스케이트',\n 37: ' 승마, 암벽등반, 철인삼종경기, 서바이벌',\n 38: ' 문화유적방문(고궁, 절, 유적지 등)',\n 39: ' 자연명승 및 풍경 관람',\n 40: ' 삼림욕',\n 41: ' 국내캠핑',\n 42: ' 해외여행',\n 43: ' 소풍/야유회',\n 44: ' 온천/해수욕',\n 45: ' 유람선 타기',\n 46: ' 테마파크가기/놀이공원/동물원/식물원 가기',\n 47: ' 지역축제 참가',\n 48: ' 자동차 드라이브',\n 49: ' 수집활동(스크랩 포함)',\n 50: ' 생활공예(십자수, 비즈공예, D.I.Y, 꽃꽂이 등)',\n 51: ' 요리하기/다도',\n 52: ' 반려동물 돌보기',\n 53: ' 노래방 가기',\n 54: ' 인테리어(집, 자동차 등)',\n 55: ' 등산',\n 56: ' 낚시',\n 57: ' 홈페이지/블로그 관리',\n 58: ' 인터넷 검색/1인 미디어 제작/SNS/영상편집',\n 59: ' 게임(온라인/모바일/콘솔게임 등)',\n 60: ' 보드게임/퍼즐/큐브 맞추기',\n 61: ' 바둑/장기/체스',\n 62: ' 겜블(경마, 경륜, 카지노, 카드놀이, 고스톱, 마작 등)/복권구입',\n 63: ' 쇼핑/외식',\n 64: ' 음주',\n 65: ' 독서(웹소설 포함)',\n 66: ' 만화보기(웹툰 포함)',\n 67: ' 미용(피부관리, 헤어관리, 네일아트, 마사지, 성형 등)',\n 68: ' 어학/기술/자격증 취득 공부/학원 등 이용',\n 69: ' 이색/테마카페 체험(방탈출, VR, 낚시카페 등)',\n 70: ' 원예(화분, 화단가꾸기 등)',\n 71: ' 산책 및 걷기',\n 72: ' 목욕/사우나/찜질방',\n 73: ' 낮잠',\n 74: ' TV시청(IPTV 포함)',\n 75: ' 모바일 컨텐츠, 동영상, VOD 시청, OTT 시청',\n 76: ' 라디오/팟캐스트 청취',\n 77: ' 음악 감상',\n 78: ' 신문/잡지보기',\n 79: ' 아무것도 안 하기',\n 80: ' 사회봉사활동',\n 81: ' 종교활동',\n 82: ' 클럽/나이트/디스코/캬바레 가기',\n 83: ' 가족 및 친지방문',\n 84: ' 잡담/통화하기/문자보내기(모바일 메신저 메시지 사용 포함)',\n 85: ' 계모임/동창회/사교(파티)모임',\n 86: ' 친구만남/이성교제/미팅/소개팅',\n 87: ' 동호회 모임',\n 88: ' 위에서 분류되지 않은 기타 여가활동',\n 89: ' 독서/만화책(웹툰)보기(2014,2016,2018)',\n 90: ' 이성교제(데이트)/미팅/소개팅(2014,2016,2018)',\n 91: ' 친구만남/동호회 모임(2014,2016,2018)',\n 99: ' 무응답'}"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"import pandas as pd\n\n# 1. 엑셀 파일에서 여가활동 코드와 이름을 매핑합니다\n# code_val_dic에서 이미 정의된 대로 여가활동의 코드와 이름이 매핑되어 있으므로 사용합니다.\n# 예: code_val_dic[Q1_1] -> 전시회 관람\n\n# 2. 비용 정보가 들어 있는 CSV 파일을 읽어옵니다.\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\n\n# 3. 여가활동의 비용을 포함한 DataFrame에서 'ID'와 각 여가활동 비용 정보를 확인합니다.\n# 'ID' 열은 사용자의 고유 ID로, Q2_5_1_N부터 Q2_5_5_N까지 여가활동에 대한 비용 정보가 있을 것입니다.\n\n# 여가활동과 관련된 비용 컬럼을 선택합니다.\ncost_columns = ['Q2_5_1_N', 'Q2_5_2_N', 'Q2_5_3_N', 'Q2_5_4_N', 'Q2_5_5_N']\n\n# 비용 데이터에서 필요한 컬럼만 추출하여 사용합니다.\nactivity_cost_df = cost_df[['ID'] + cost_columns]\n\n# 4. 유저가 입력한 여가활동 코드와 비용을 연관짓는 함수\ndef get_activity_cost(activity_name):\n    # 여가활동 이름을 입력받아서 해당 코드 값으로 변환\n    activity_code = None\n    for key, value in code_val_dic.items():\n        if value == activity_name:\n            activity_code = key\n            break\n    \n    if activity_code is None:\n        return \"입력한 여가활동이 목록에 없습니다.\"\n\n    # 5. 해당 여가활동 코드가 포함된 열을 찾아서 비용 계산\n    # 각 유저에 대한 비용 정보에서 해당 여가활동 코드와 매칭되는 컬럼을 찾아야 합니다.\n    # 예: 'Q2_5_1_N', 'Q2_5_2_N' 등에서 활동 비용을 찾아 평균을 구합니다.\n    \n    # 활동 비용 컬럼을 찾아서 평균 비용을 계산합니다.\n    # 각 컬럼에서 해당 여가활동 코드의 비용을 찾습니다.\n    activity_costs = []\n    for col in cost_columns:\n        if activity_code in col:\n            activity_costs.append(activity_cost_df[col].mean())  # 각 컬럼의 평균 비용\n\n    # 평균 비용을 반환합니다.\n    if activity_costs:\n        return f\"활동 '{activity_name}'의 평균 비용은 {sum(activity_costs) / len(activity_costs):,.2f}입니다.\"\n    else:\n        return f\"활동 '{activity_name}'에 대한 비용 정보가 없습니다.\"\n\n# 예시: '영화관람' 활동에 대한 비용을 조회\nactivity_name = \"영화관람\"  # 유저가 입력한 여가활동 이름\nresult = get_activity_cost(activity_name)\nprint(result)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:03:25.120806Z","iopub.execute_input":"2024-11-15T02:03:25.121425Z","iopub.status.idle":"2024-11-15T02:03:25.150131Z","shell.execute_reply.started":"2024-11-15T02:03:25.121373Z","shell.execute_reply":"2024-11-15T02:03:25.148808Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 코드와 이름 매핑 딕셔너리 만들기\ndata_list = code_df.values.tolist()\ncode_val_dic = {}\nfor key, value in data_list:\n    code_val_dic[key] = value\n\n# 여가활동 비용을 담고 있는 데이터 준비\nbase_df = cost_df.iloc[:,:5]\nculture_df = cost_df.iloc[:,1:]\nculture_df['ID'] = cost_df['ID']\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\n# 여가활동 코드와 비용이 매핑된 DataFrame을 만들어 두기\ncost_dict = {}\nfor idx, row in culture_df.iterrows():\n    for col in culture_df.columns[1:]:\n        cost_dict[code_val_dic.get(col)] = row[col]\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:04:13.214923Z","iopub.execute_input":"2024-11-15T02:04:13.215342Z","iopub.status.idle":"2024-11-15T02:04:14.332599Z","shell.execute_reply.started":"2024-11-15T02:04:13.215303Z","shell.execute_reply":"2024-11-15T02:04:14.331331Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"def get_activity_cost(activity_name):\n    # 유저가 입력한 활동 이름을 매칭하여 비용을 출력\n    if activity_name in cost_dict:\n        return f\"'{activity_name}'의 예상 비용은 {cost_dict[activity_name]}입니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 정보가 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_activity_cost(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:04:19.140946Z","iopub.execute_input":"2024-11-15T02:04:19.141534Z","iopub.status.idle":"2024-11-15T02:04:22.628276Z","shell.execute_reply.started":"2024-11-15T02:04:19.141432Z","shell.execute_reply":"2024-11-15T02:04:22.626809Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  축구\n"},{"name":"stdout","text":"'축구'에 대한 정보가 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":52},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 코드와 이름 매핑 딕셔너리 만들기\ndata_list = code_df.values.tolist()\ncode_val_dic = {value: key for key, value in data_list}  # 이름 -> 코드로 변환 (기존과 반대로)\n\n# 여가활동 비용을 담고 있는 데이터 준비\nbase_df = cost_df.iloc[:,:5]\nculture_df = cost_df.iloc[:,1:]\nculture_df['ID'] = cost_df['ID']\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\n# 여가활동 코드와 비용이 매핑된 DataFrame을 만들어 두기\ncost_dict = {}\nfor idx, row in culture_df.iterrows():\n    for col in culture_df.columns[1:]:\n        cost_dict[code_val_dic.get(col)] = row[col]  # 코드에 따른 비용\n\n# 유저 입력을 받아 여가활동 비용 출력\ndef get_activity_cost(activity_name):\n    # 유저가 입력한 이름을 코드로 변환\n    activity_code = code_val_dic.get(activity_name)\n    \n    if activity_code and activity_code in cost_dict:\n        return f\"'{activity_name}'의 예상 비용은 {cost_dict[activity_code]}입니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 정보가 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_activity_cost(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:10:03.691761Z","iopub.execute_input":"2024-11-15T02:10:03.692257Z","iopub.status.idle":"2024-11-15T02:10:07.742301Z","shell.execute_reply.started":"2024-11-15T02:10:03.692214Z","shell.execute_reply":"2024-11-15T02:10:07.741156Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  사진촬영\n"},{"name":"stdout","text":"'사진촬영'에 대한 정보가 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":55},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 코드와 이름 매핑 딕셔너리 만들기\ndata_list = code_df.values.tolist()\ncode_val_dic = {value: key for key, value in data_list}  # 이름 -> 코드로 변환 (기존과 반대로)\n\n# 여가활동 비용을 담고 있는 데이터 준비\nbase_df = cost_df.iloc[:,:5]\nculture_df = cost_df.iloc[:,1:]\nculture_df['ID'] = cost_df['ID']\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\n# 여가활동 코드와 비용이 매핑된 DataFrame을 만들어 두기\ncost_dict = {}\nfor idx, row in culture_df.iterrows():\n    for col in culture_df.columns[1:]:\n        cost_dict[code_val_dic.get(col)] = row[col]  # 코드에 따른 비용\n\n# 여가활동 이름에 해당하는 모든 코드 찾기\ndef get_related_activities(activity_name):\n    # 유저가 입력한 이름을 포함하는 활동들 찾기\n    related_activities = [key for key, value in code_val_dic.items() if activity_name in value]\n    \n    if related_activities:\n        result = []\n        for activity_code in related_activities:\n            if activity_code in cost_dict:\n                result.append(f\"'{code_val_dic[activity_code]}'의 예상 비용은 {cost_dict[activity_code]}입니다.\")\n        return \"\\n\".join(result)\n    else:\n        return f\"'{activity_name}'에 대한 정보가 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_related_activities(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:10:56.344038Z","iopub.execute_input":"2024-11-15T02:10:56.344485Z","iopub.status.idle":"2024-11-15T02:10:59.688672Z","shell.execute_reply.started":"2024-11-15T02:10:56.344443Z","shell.execute_reply":"2024-11-15T02:10:59.687399Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  축구\n"},{"name":"stdout","text":"'축구'에 대한 정보가 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":56},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 코드와 이름 매핑 딕셔너리 만들기\ndata_list = code_df.values.tolist()\ncode_val_dic = {value: key for key, value in data_list}  # 이름 -> 코드로 변환 (기존과 반대로)\n\n# 여가활동 비용을 담고 있는 데이터 준비\nbase_df = cost_df.iloc[:,:5]\nculture_df = cost_df.iloc[:,1:]\nculture_df['ID'] = cost_df['ID']\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\n# 여가활동 코드와 비용이 매핑된 DataFrame을 만들어 두기\ncost_dict = {}\nfor idx, row in culture_df.iterrows():\n    for col in culture_df.columns[1:]:\n        cost_dict[code_val_dic.get(col)] = row[col]  # 코드에 따른 비용\n\n# 여가활동 이름에 해당하는 모든 코드 찾기\ndef get_related_activities(activity_name):\n    # 유저가 입력한 이름을 포함하는 활동들 찾기\n    related_activities = [value for key, value in code_val_dic.items() if activity_name in value]\n    \n    if related_activities:\n        result = []\n        for activity_name in related_activities:\n            activity_code = code_val_dic.get(activity_name)\n            if activity_code in cost_dict:\n                result.append(f\"'{activity_name}'의 예상 비용은 {cost_dict[activity_code]}입니다.\")\n        return \"\\n\".join(result)\n    else:\n        return f\"'{activity_name}'에 대한 정보가 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_related_activities(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:11:38.178127Z","iopub.execute_input":"2024-11-15T02:11:38.178592Z","iopub.status.idle":"2024-11-15T02:11:42.732914Z","shell.execute_reply.started":"2024-11-15T02:11:38.178546Z","shell.execute_reply":"2024-11-15T02:11:42.731497Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  축구\n"},{"name":"stdout","text":"'축구'에 대한 정보가 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":57},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 이름을 뽑아 리스트로 생성\nactivity_names = code_df.iloc[:, 1].tolist()  # 1번째 열이 여가활동 이름이라고 가정\n\n# 여가활동 이름 출력\nprint(activity_names)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:12:05.513008Z","iopub.execute_input":"2024-11-15T02:12:05.513542Z","iopub.status.idle":"2024-11-15T02:12:05.552281Z","shell.execute_reply.started":"2024-11-15T02:12:05.513488Z","shell.execute_reply":"2024-11-15T02:12:05.550929Z"}},"outputs":[{"name":"stdout","text":"['전시회 관람(미술, 사진, 건축, 디자인 등)', '박물관 관람', '음악연주회 관람(클래식, 오페라 등)', '전통예술공연 관람(국악, 민속놀이 등)', '연극공연 관람(뮤지컬 포함)', '무용공연 관람', '영화관람', '연예공연 관람(쇼, 콘서트, 마술 쇼 등)', '문학행사참여', '글짓기/독서토론', '미술활동(그림, 서예, 조각, 디자인, 도예, 만화 등)', '악기연주/노래교실', '전통예술 배우기(사물놀이, 줄타기 등)', '사진촬영(디지털카메라 포함)', '춤/무용(발레, 한국무용, 현대무용, 방송댄스, 스트릿댄스, 비보잉 등)', '스포츠 경기 직접관람- 경기장방문관람(축구, 야구,농구, 배구 등)', '스포츠 경기 간접관람- TV, DMB를 통한관람(축구, 야구, 농구, 배구 등)', '격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)', '온라인게임 경기관람(e-스포츠 경기 포함)', '농구, 배구, 야구, 축구, 족구', '테니스, 스쿼시', '당구/포켓볼', '볼링, 탁구', '골프', '수영', '윈드서핑, 수상스키, 스킨스쿠버다이빙, 래프팅, 요트', '스노보드, 스키 등', '아이스스케이트, 아이스하키 등', '헬스(보디빌딩)/에어로빅', '요가/필라테스/태보', '배드민턴/줄넘기/맨손, 스트레칭 체조/훌라후프', '육상/조깅/속보', '격투 스포츠(태권도, 유도, 합기도, 검도, 권투 등)', '댄스스포츠(탱고, 왈츠, 자이브, 맘보,폴카, 차차차등)', '사이클링/산악자전거', '인라인스케이트', '승마, 암벽등반, 철인삼종경기, 서바이벌', '문화유적방문(고궁, 절, 유적지 등)', '자연명승 및 풍경 관람', '삼림욕', '국내캠핑', '해외여행', '소풍/야유회', '온천/해수욕', '유람선 타기', '테마파크가기/놀이공원/동물원/식물원 가기', '지역축제 참가', '자동차 드라이브', '수집활동(스크랩 포함)', '생활공예(십자수, 비즈공예, D.I.Y, 꽃꽂이 등)', '요리하기/다도', '반려동물 돌보기', '노래방 가기', '인테리어(집, 자동차 등)', '등산', '낚시', '홈페이지/블로그 관리', '인터넷 검색/1인 미디어 제작/SNS/영상편집', '게임(온라인/모바일/콘솔게임 등)', '보드게임/퍼즐/큐브 맞추기', '바둑/장기/체스', '겜블(경마, 경륜, 카지노, 카드놀이, 고스톱, 마작 등)/복권구입', '쇼핑/외식', '음주', '독서(웹소설 포함)', '만화보기(웹툰 포함)', '미용(피부관리, 헤어관리, 네일아트, 마사지, 성형 등)', '어학/기술/자격증 취득 공부/학원 등 이용', '이색/테마카페 체험(방탈출, VR, 낚시카페 등)', '원예(화분, 화단가꾸기 등)', '산책 및 걷기', '목욕/사우나/찜질방', '낮잠', 'TV시청(IPTV 포함)', '모바일 컨텐츠, 동영상, VOD 시청, OTT 시청', '라디오/팟캐스트 청취', '음악 감상', '신문/잡지보기', '아무것도 안 하기', '사회봉사활동', '종교활동', '클럽/나이트/디스코/캬바레 가기', '가족 및 친지방문', '잡담/통화하기/문자보내기(모바일 메신저 메시지 사용 포함)', '계모임/동창회/사교(파티)모임', '친구만남/이성교제/미팅/소개팅', '동호회 모임', '위에서 분류되지 않은 기타 여가활동', '독서/만화책(웹툰)보기(2014,2016,2018)', '이성교제(데이트)/미팅/소개팅(2014,2016,2018)', '친구만남/동호회 모임(2014,2016,2018)']\n","output_type":"stream"}],"execution_count":58},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 데이터프레임의 첫 몇 줄을 출력하여 열 구조 확인\nprint(code_df.head())\n\n# 여가활동 이름을 뽑아 리스트로 생성 (열 번호 또는 이름을 수정)\nactivity_names = code_df['응답자 ID'].tolist()  # 여가활동 이름이 있는 열의 정확한 열 이름으로 수정\n\n# 여가활동 이름 출력\nprint(activity_names)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:13:13.792508Z","iopub.execute_input":"2024-11-15T02:13:13.792985Z","iopub.status.idle":"2024-11-15T02:13:13.833124Z","shell.execute_reply.started":"2024-11-15T02:13:13.792940Z","shell.execute_reply":"2024-11-15T02:13:13.831868Z"}},"outputs":[{"name":"stdout","text":"     ID                     응답자 ID\n0  Q1_1  전시회 관람(미술, 사진, 건축, 디자인 등)\n1  Q1_2                     박물관 관람\n2  Q1_3       음악연주회 관람(클래식, 오페라 등)\n3  Q1_4      전통예술공연 관람(국악, 민속놀이 등)\n4  Q1_5            연극공연 관람(뮤지컬 포함)\n['전시회 관람(미술, 사진, 건축, 디자인 등)', '박물관 관람', '음악연주회 관람(클래식, 오페라 등)', '전통예술공연 관람(국악, 민속놀이 등)', '연극공연 관람(뮤지컬 포함)', '무용공연 관람', '영화관람', '연예공연 관람(쇼, 콘서트, 마술 쇼 등)', '문학행사참여', '글짓기/독서토론', '미술활동(그림, 서예, 조각, 디자인, 도예, 만화 등)', '악기연주/노래교실', '전통예술 배우기(사물놀이, 줄타기 등)', '사진촬영(디지털카메라 포함)', '춤/무용(발레, 한국무용, 현대무용, 방송댄스, 스트릿댄스, 비보잉 등)', '스포츠 경기 직접관람- 경기장방문관람(축구, 야구,농구, 배구 등)', '스포츠 경기 간접관람- TV, DMB를 통한관람(축구, 야구, 농구, 배구 등)', '격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)', '온라인게임 경기관람(e-스포츠 경기 포함)', '농구, 배구, 야구, 축구, 족구', '테니스, 스쿼시', '당구/포켓볼', '볼링, 탁구', '골프', '수영', '윈드서핑, 수상스키, 스킨스쿠버다이빙, 래프팅, 요트', '스노보드, 스키 등', '아이스스케이트, 아이스하키 등', '헬스(보디빌딩)/에어로빅', '요가/필라테스/태보', '배드민턴/줄넘기/맨손, 스트레칭 체조/훌라후프', '육상/조깅/속보', '격투 스포츠(태권도, 유도, 합기도, 검도, 권투 등)', '댄스스포츠(탱고, 왈츠, 자이브, 맘보,폴카, 차차차등)', '사이클링/산악자전거', '인라인스케이트', '승마, 암벽등반, 철인삼종경기, 서바이벌', '문화유적방문(고궁, 절, 유적지 등)', '자연명승 및 풍경 관람', '삼림욕', '국내캠핑', '해외여행', '소풍/야유회', '온천/해수욕', '유람선 타기', '테마파크가기/놀이공원/동물원/식물원 가기', '지역축제 참가', '자동차 드라이브', '수집활동(스크랩 포함)', '생활공예(십자수, 비즈공예, D.I.Y, 꽃꽂이 등)', '요리하기/다도', '반려동물 돌보기', '노래방 가기', '인테리어(집, 자동차 등)', '등산', '낚시', '홈페이지/블로그 관리', '인터넷 검색/1인 미디어 제작/SNS/영상편집', '게임(온라인/모바일/콘솔게임 등)', '보드게임/퍼즐/큐브 맞추기', '바둑/장기/체스', '겜블(경마, 경륜, 카지노, 카드놀이, 고스톱, 마작 등)/복권구입', '쇼핑/외식', '음주', '독서(웹소설 포함)', '만화보기(웹툰 포함)', '미용(피부관리, 헤어관리, 네일아트, 마사지, 성형 등)', '어학/기술/자격증 취득 공부/학원 등 이용', '이색/테마카페 체험(방탈출, VR, 낚시카페 등)', '원예(화분, 화단가꾸기 등)', '산책 및 걷기', '목욕/사우나/찜질방', '낮잠', 'TV시청(IPTV 포함)', '모바일 컨텐츠, 동영상, VOD 시청, OTT 시청', '라디오/팟캐스트 청취', '음악 감상', '신문/잡지보기', '아무것도 안 하기', '사회봉사활동', '종교활동', '클럽/나이트/디스코/캬바레 가기', '가족 및 친지방문', '잡담/통화하기/문자보내기(모바일 메신저 메시지 사용 포함)', '계모임/동창회/사교(파티)모임', '친구만남/이성교제/미팅/소개팅', '동호회 모임', '위에서 분류되지 않은 기타 여가활동', '독서/만화책(웹툰)보기(2014,2016,2018)', '이성교제(데이트)/미팅/소개팅(2014,2016,2018)', '친구만남/동호회 모임(2014,2016,2018)']\n","output_type":"stream"}],"execution_count":61},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 데이터프레임의 첫 몇 줄을 출력하여 열 구조 확인\nprint(code_df.head())\n\n# 열 이름 확인\nprint(code_df.columns)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:13:02.760113Z","iopub.execute_input":"2024-11-15T02:13:02.760558Z","iopub.status.idle":"2024-11-15T02:13:02.799327Z","shell.execute_reply.started":"2024-11-15T02:13:02.760515Z","shell.execute_reply":"2024-11-15T02:13:02.797773Z"}},"outputs":[{"name":"stdout","text":"     ID                     응답자 ID\n0  Q1_1  전시회 관람(미술, 사진, 건축, 디자인 등)\n1  Q1_2                     박물관 관람\n2  Q1_3       음악연주회 관람(클래식, 오페라 등)\n3  Q1_4      전통예술공연 관람(국악, 민속놀이 등)\n4  Q1_5            연극공연 관람(뮤지컬 포함)\nIndex(['ID', '응답자 ID'], dtype='object')\n","output_type":"stream"}],"execution_count":60},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 코드와 이름 매핑 딕셔너리 만들기\ndata_list = code_df.values.tolist()\ncode_val_dic = {value: key for key, value in data_list}  # 이름 -> 코드로 변환 (기존과 반대로)\n\n# 여가활동 비용을 담고 있는 데이터 준비\nbase_df = cost_df.iloc[:, :5]\nculture_df = cost_df.iloc[:, 1:]\nculture_df['ID'] = cost_df['ID']\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\n# 여가활동 코드와 비용이 매핑된 DataFrame을 만들어 두기\ncost_dict = {}\nfor idx, row in culture_df.iterrows():\n    for col in culture_df.columns[1:]:\n        cost_dict[code_val_dic.get(col)] = row[col]  # 코드에 따른 비용\n\n# 여가활동 이름에 해당하는 모든 코드 찾기\ndef get_related_activities(activity_name):\n    # 유저가 입력한 이름을 포함하는 활동들 찾기\n    related_activities = [value for key, value in code_val_dic.items() if activity_name in value]\n    \n    if related_activities:\n        result = []\n        for activity_name in related_activities:\n            activity_code = code_val_dic.get(activity_name)\n            if activity_code in cost_dict:\n                result.append(f\"'{activity_name}'의 예상 비용은 {cost_dict[activity_code]}입니다.\")\n        if result:\n            return \"\\n\".join(result)\n        else:\n            return f\"'{activity_name}'에 대한 예상 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 정보가 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_related_activities(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:14:26.185298Z","iopub.execute_input":"2024-11-15T02:14:26.185776Z","iopub.status.idle":"2024-11-15T02:14:29.267160Z","shell.execute_reply.started":"2024-11-15T02:14:26.185728Z","shell.execute_reply":"2024-11-15T02:14:29.265699Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  전시회 관람(미술, 사진, 건축, 디자인 등)\n"},{"name":"stdout","text":"'전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 정보가 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":63},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정하세요\ncost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")\ncode_df = pd.read_excel(\"/kaggle/input/code-say/_base.xlsx\")\n\n# 여가활동 코드와 이름 매핑 딕셔너리 만들기\ndata_list = code_df.values.tolist()\ncode_val_dic = {value: key for key, value in data_list}  # 이름 -> 코드로 변환 (기존과 반대로)\n\n# 여가활동 비용을 담고 있는 데이터 준비\nbase_df = cost_df.iloc[:, :5]\nculture_df = cost_df.iloc[:, 1:]\nculture_df['ID'] = cost_df['ID']\nculture_df = culture_df[['ID'] + culture_df.columns[:-1].tolist()]\n\n# 여가활동 코드와 비용이 매핑된 DataFrame을 만들어 두기\ncost_dict = {}\nfor idx, row in culture_df.iterrows():\n    for col in culture_df.columns[1:]:\n        cost_dict[code_val_dic.get(col)] = row[col]  # 코드에 따른 비용\n\n# 여가활동 이름에 해당하는 모든 코드 찾기\ndef get_related_activities(activity_name):\n    # 유저가 입력한 이름을 소문자 처리하고 공백, 괄호 등을 제거\n    cleaned_activity_name = activity_name.lower().replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\")\n\n    # 유저가 입력한 이름을 포함하는 활동들 찾기\n    related_activities = [value for key, value in code_val_dic.items() if cleaned_activity_name in value.lower().replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\")]\n    \n    if related_activities:\n        result = []\n        for activity_name in related_activities:\n            activity_code = code_val_dic.get(activity_name)\n            if activity_code in cost_dict:\n                result.append(f\"'{activity_name}'의 예상 비용은 {cost_dict[activity_code]}입니다.\")\n        if result:\n            return \"\\n\".join(result)\n        else:\n            return f\"'{activity_name}'에 대한 예상 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 정보가 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_related_activities(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:15:18.321829Z","iopub.execute_input":"2024-11-15T02:15:18.322253Z","iopub.status.idle":"2024-11-15T02:15:27.258493Z","shell.execute_reply.started":"2024-11-15T02:15:18.322212Z","shell.execute_reply":"2024-11-15T02:15:27.257108Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  전시회 관람(미술, 사진, 건축, 디자인 등)\n"},{"name":"stdout","text":"'전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 정보가 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":64},{"cell_type":"code","source":"culture_df['ID']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:16:17.183484Z","iopub.execute_input":"2024-11-15T02:16:17.184307Z","iopub.status.idle":"2024-11-15T02:16:17.194375Z","shell.execute_reply.started":"2024-11-15T02:16:17.184260Z","shell.execute_reply":"2024-11-15T02:16:17.193049Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"0        1003001\n1        1003002\n2        1003003\n3        1003004\n4        1003021\n          ...   \n10035    2505067\n10036    2505068\n10037    2505069\n10038    2505070\n10039    2505071\nName: ID, Length: 10040, dtype: int64"},"metadata":{}}],"execution_count":65},{"cell_type":"code","source":"culture_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:16:24.576476Z","iopub.execute_input":"2024-11-15T02:16:24.577331Z","iopub.status.idle":"2024-11-15T02:16:24.598651Z","shell.execute_reply.started":"2024-11-15T02:16:24.577280Z","shell.execute_reply":"2024-11-15T02:16:24.597450Z"}},"outputs":[{"execution_count":66,"output_type":"execute_result","data":{"text/plain":"            ID  Q2_5_1_N  Q2_5_2_N  Q2_5_3_N  Q2_5_4_N  Q2_5_5_N\n0      1003001         0       0.0       0.0   30000.0     500.0\n1      1003002      2000       0.0    5000.0       0.0   50000.0\n2      1003003         0       0.0   30000.0       0.0   80000.0\n3      1003004         0       0.0   50000.0   50000.0    5000.0\n4      1003021      2000   30000.0   50000.0       0.0       0.0\n...        ...       ...       ...       ...       ...       ...\n10035  2505067     30000   30000.0    2000.0   30000.0   50000.0\n10036  2505068     20000   30000.0   20000.0   20000.0   30000.0\n10037  2505069     20000   30000.0   50000.0   20000.0    1000.0\n10038  2505070     30000    1000.0   30000.0   30000.0   10000.0\n10039  2505071     20000   20000.0    5000.0   20000.0   30000.0\n\n[10040 rows x 6 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ID</th>\n      <th>Q2_5_1_N</th>\n      <th>Q2_5_2_N</th>\n      <th>Q2_5_3_N</th>\n      <th>Q2_5_4_N</th>\n      <th>Q2_5_5_N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1003001</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>500.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1003002</td>\n      <td>2000</td>\n      <td>0.0</td>\n      <td>5000.0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1003003</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>30000.0</td>\n      <td>0.0</td>\n      <td>80000.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1003004</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>50000.0</td>\n      <td>50000.0</td>\n      <td>5000.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1003021</td>\n      <td>2000</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>10035</th>\n      <td>2505067</td>\n      <td>30000</td>\n      <td>30000.0</td>\n      <td>2000.0</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n    </tr>\n    <tr>\n      <th>10036</th>\n      <td>2505068</td>\n      <td>20000</td>\n      <td>30000.0</td>\n      <td>20000.0</td>\n      <td>20000.0</td>\n      <td>30000.0</td>\n    </tr>\n    <tr>\n      <th>10037</th>\n      <td>2505069</td>\n      <td>20000</td>\n      <td>30000.0</td>\n      <td>50000.0</td>\n      <td>20000.0</td>\n      <td>1000.0</td>\n    </tr>\n    <tr>\n      <th>10038</th>\n      <td>2505070</td>\n      <td>30000</td>\n      <td>1000.0</td>\n      <td>30000.0</td>\n      <td>30000.0</td>\n      <td>10000.0</td>\n    </tr>\n    <tr>\n      <th>10039</th>\n      <td>2505071</td>\n      <td>20000</td>\n      <td>20000.0</td>\n      <td>5000.0</td>\n      <td>20000.0</td>\n      <td>30000.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10040 rows × 6 columns</p>\n</div>"},"metadata":{}}],"execution_count":66},{"cell_type":"code","source":"import pandas as pd\n\n# 파일 경로를 지정\nleisure_type_df = pd.read_excel(\"/kaggle/input/leisure-type/.xlsx\")  # 여가활동 이름과 코드\nuser_cost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")  # 사용자의 비용 정보\nuser_act_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")  # 사용자 여가활동 코드\n\n# 여가활동 코드와 이름 매핑 (여기서는 'code' -> 'value' 구조)\nactivity_to_code = dict(zip(leisure_type_df['value'], leisure_type_df['code']))\n\n# 사용자가 입력한 여가활동에 대한 코드와 비용을 찾기 위한 함수\ndef get_activity_cost(activity_name):\n    # 여가활동 이름에 해당하는 코드 찾기\n    if activity_name in activity_to_code:\n        activity_code = activity_to_code[activity_name]\n        \n        # 여가활동 코드가 user_act_df의 어떤 열에도 포함되는지 찾기\n        related_users = user_act_df.apply(lambda row: activity_code in row.values, axis=1)\n        relevant_users_df = user_cost_df[related_users]\n        \n        # 해당하는 사용자들의 비용을 계산\n        cost_columns = [col for col in user_cost_df.columns if 'Q2_5' in col]\n        costs = relevant_users_df[cost_columns].values.flatten()\n\n        if len(costs) > 0:\n            # 평균 비용을 계산하여 출력\n            average_cost = costs.mean()\n            return f\"'{activity_name}'에 대한 평균 비용은 {average_cost:.2f}원입니다.\"\n        else:\n            return f\"'{activity_name}'에 대한 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 여가활동을 찾을 수 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_activity_cost(user_input))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:23:00.678775Z","iopub.execute_input":"2024-11-15T02:23:00.679904Z","iopub.status.idle":"2024-11-15T02:23:02.805789Z","shell.execute_reply.started":"2024-11-15T02:23:00.679852Z","shell.execute_reply":"2024-11-15T02:23:02.804683Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  전시회 관람(미술, 사진, 건축, 디자인 등)\n"},{"name":"stdout","text":"'전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 여가활동을 찾을 수 없습니다. 다시 입력해주세요.\n","output_type":"stream"}],"execution_count":68},{"cell_type":"code","source":"import pandas as pd\nimport re\n\n# 파일 경로를 지정\nleisure_type_df = pd.read_excel(\"/kaggle/input/leisure-type/.xlsx\")  # 여가활동 이름과 코드\nuser_cost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")  # 사용자의 비용 정보\nuser_act_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")  # 사용자 여가활동 코드\n\n# 여가활동 코드와 이름 매핑 (여기서는 'code' -> 'value' 구조)\nactivity_to_code = dict(zip(leisure_type_df['value'], leisure_type_df['code']))\n\n# 입력값 정리 함수 (공백 제거 및 특수문자 처리)\ndef clean_activity_name(name):\n    # 공백 제거하고 특수문자 (괄호, 쉼표 등) 처리\n    name = re.sub(r'\\s+', '', name)  # 공백 제거\n    name = re.sub(r'[^\\w\\s]', '', name)  # 특수문자 제거\n    return name.lower()  # 소문자로 변환\n\n# 여가활동 코드와 사용자 비용 연결\ndef get_activity_cost(activity_name):\n    # 입력받은 여가활동 이름 정리\n    cleaned_input_name = clean_activity_name(activity_name)\n\n    # 여가활동 이름을 정리하여 찾기\n    matched_activity = None\n    for activity in activity_to_code.keys():\n        if clean_activity_name(activity) == cleaned_input_name:\n            matched_activity = activity\n            break\n\n    if matched_activity:\n        activity_code = activity_to_code[matched_activity]\n        \n        # 여가활동 코드가 user_act_df의 어떤 열에도 포함되는지 찾기\n        related_users = user_act_df.apply(lambda row: activity_code in row.values, axis=1)\n        relevant_users_df = user_cost_df[related_users]\n        \n        # 해당하는 사용자들의 비용을 계산\n        cost_columns = [col for col in user_cost_df.columns if 'Q2_5' in col]\n        costs = relevant_users_df[cost_columns].values.flatten()\n\n        if len(costs) > 0:\n            # 평균 비용을 계산하여 출력\n            average_cost = costs.mean()\n            return f\"'{matched_activity}'에 대한 평균 비용은 {average_cost:.2f}원입니다.\"\n        else:\n            return f\"'{matched_activity}'에 대한 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 여가활동을 찾을 수 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_activity_cost(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:23:29.474919Z","iopub.execute_input":"2024-11-15T02:23:29.475329Z","iopub.status.idle":"2024-11-15T02:23:37.298556Z","shell.execute_reply.started":"2024-11-15T02:23:29.475291Z","shell.execute_reply":"2024-11-15T02:23:37.297239Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  전시회 관람(미술, 사진, 건축, 디자인 등)\n"},{"name":"stdout","text":"' 전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 평균 비용은 nan원입니다.\n","output_type":"stream"}],"execution_count":69},{"cell_type":"code","source":"import pandas as pd\nimport re\n\n# 파일 경로를 지정\nleisure_type_df = pd.read_excel(\"/kaggle/input/leisure-type/.xlsx\")  # 여가활동 이름과 코드\nuser_cost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")  # 사용자의 비용 정보\nuser_act_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")  # 사용자 여가활동 코드\n\n# 여가활동 코드와 이름 매핑 (여기서는 'code' -> 'value' 구조)\nactivity_to_code = dict(zip(leisure_type_df['value'], leisure_type_df['code']))\n\n# 입력값 정리 함수 (공백 제거 및 특수문자 처리)\ndef clean_activity_name(name):\n    # 공백 제거하고 특수문자 (괄호, 쉼표 등) 처리\n    name = re.sub(r'\\s+', '', name)  # 공백 제거\n    name = re.sub(r'[^\\w\\s]', '', name)  # 특수문자 제거\n    return name.lower()  # 소문자로 변환\n\n# 여가활동 코드와 사용자 비용 연결\ndef get_activity_cost(activity_name):\n    # 입력받은 여가활동 이름 정리\n    cleaned_input_name = clean_activity_name(activity_name)\n\n    # 여가활동 이름을 정리하여 찾기\n    matched_activity = None\n    for activity in activity_to_code.keys():\n        if clean_activity_name(activity) == cleaned_input_name:\n            matched_activity = activity\n            break\n\n    if matched_activity:\n        activity_code = activity_to_code[matched_activity]\n        \n        # 여가활동 코드가 user_act_df의 어떤 열에도 포함되는지 찾기\n        related_users = user_act_df.apply(lambda row: activity_code in row.values, axis=1)\n        relevant_users_df = user_cost_df[related_users]\n        \n        # 해당하는 사용자들의 비용을 계산\n        cost_columns = [col for col in user_cost_df.columns if 'Q2_5' in col]\n        costs = relevant_users_df[cost_columns].values.flatten()\n\n        # NaN 값을 0으로 대체\n        costs = pd.Series(costs).fillna(0).values\n\n        if len(costs) > 0:\n            # 평균 비용을 계산하여 출력\n            average_cost = costs.mean()\n            return f\"'{matched_activity}'에 대한 평균 비용은 {average_cost:.2f}원입니다.\"\n        else:\n            return f\"'{matched_activity}'에 대한 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 여가활동을 찾을 수 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 입력 받기\nuser_input = input(\"여가활동 이름을 입력하세요: \")\nprint(get_activity_cost(user_input))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:25:15.549481Z","iopub.execute_input":"2024-11-15T02:25:15.549931Z","iopub.status.idle":"2024-11-15T02:25:19.786145Z","shell.execute_reply.started":"2024-11-15T02:25:15.549881Z","shell.execute_reply":"2024-11-15T02:25:19.784864Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"여가활동 이름을 입력하세요:  전시회 관람(미술, 사진, 건축, 디자인 등)\n"},{"name":"stdout","text":"' 전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 평균 비용은 47199.27원입니다.\n","output_type":"stream"}],"execution_count":71},{"cell_type":"code","source":"import pandas as pd\nimport re\n\n# 파일 경로를 지정\nleisure_type_df = pd.read_excel(\"/kaggle/input/leisure-type/.xlsx\")  # 여가활동 이름과 코드\nuser_cost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")  # 사용자의 비용 정보\nuser_act_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")  # 사용자 여가활동 코드\n\n# 여가활동 코드와 이름 매핑 (여기서는 'code' -> 'value' 구조)\nactivity_to_code = dict(zip(leisure_type_df['value'], leisure_type_df['code']))\n\n# 입력값 정리 함수 (공백 제거 및 특수문자 처리)\ndef clean_activity_name(name):\n    # 공백 제거하고 특수문자 (괄호, 쉼표 등) 처리\n    name = re.sub(r'\\s+', '', name)  # 공백 제거\n    name = re.sub(r'[^\\w\\s]', '', name)  # 특수문자 제거\n    return name.lower()  # 소문자로 변환\n\n# 여가활동 코드와 사용자 비용 연결\ndef get_activity_cost(activity_name):\n    # 입력받은 여가활동 이름 정리\n    cleaned_input_name = clean_activity_name(activity_name)\n\n    # 여가활동 이름을 정리하여 찾기\n    matched_activity = None\n    for activity in activity_to_code.keys():\n        if clean_activity_name(activity) == cleaned_input_name:\n            matched_activity = activity\n            break\n\n    if matched_activity:\n        activity_code = activity_to_code[matched_activity]\n        \n        # 여가활동 코드가 user_act_df의 어떤 열에도 포함되는지 찾기\n        related_users = user_act_df.apply(lambda row: activity_code in row.values, axis=1)\n        relevant_users_df = user_cost_df[related_users]\n        \n        # 해당하는 사용자들의 비용을 계산\n        cost_columns = [col for col in user_cost_df.columns if 'Q2_5' in col]\n        costs = relevant_users_df[cost_columns].values.flatten()\n\n        # NaN 값을 0으로 대체\n        costs = pd.Series(costs).fillna(0).values\n\n        if len(costs) > 0:\n            # 평균 비용을 계산하여 출력\n            average_cost = costs.mean()\n            return f\"'{matched_activity}'에 대한 평균 비용은 {average_cost:.2f}원입니다.\"\n        else:\n            return f\"'{matched_activity}'에 대한 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 여가활동을 찾을 수 없습니다. 다시 입력해주세요.\"\n\n# 유저로부터 5개의 여가활동 이름을 입력 받기\nuser_inputs = []\nfor i in range(5):\n    user_input = input(f\"{i+1}번째 여가활동 이름을 입력하세요: \")\n    user_inputs.append(user_input)\n\n# 각 여가활동에 대한 평균 비용을 계산하고 출력\nfor activity in user_inputs:\n    print(get_activity_cost(activity))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:29:46.815601Z","iopub.execute_input":"2024-11-15T02:29:46.816074Z","iopub.status.idle":"2024-11-15T02:30:44.050898Z","shell.execute_reply.started":"2024-11-15T02:29:46.816029Z","shell.execute_reply":"2024-11-15T02:30:44.049653Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"1번째 여가활동 이름을 입력하세요:  전시회 관람(미술, 사진, 건축, 디자인 등)\n2번째 여가활동 이름을 입력하세요:   전통예술공연 관람(국악, 민속놀이 등)\n3번째 여가활동 이름을 입력하세요:  전통예술 배우기(사물놀이, 줄타기 등)\n4번째 여가활동 이름을 입력하세요:  격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)\n5번째 여가활동 이름을 입력하세요:  온라인게임 경기관람(e-스포츠 경기 포함)\n"},{"name":"stdout","text":"' 전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 평균 비용은 47199.27원입니다.\n' 전통예술공연 관람(국악, 민속놀이 등)'에 대한 평균 비용은 23696.43원입니다.\n' 전통예술 배우기(사물놀이, 줄타기 등)'에 대한 평균 비용은 40916.67원입니다.\n' 격투 스포츠 경기관람(태권도, 유도, 합기도, 검도,권투 등)'에 대한 평균 비용은 11142.26원입니다.\n' 온라인게임 경기관람(e-스포츠 경기 포함)'에 대한 평균 비용은 20425.35원입니다.\n","output_type":"stream"}],"execution_count":72},{"cell_type":"code","source":"import pandas as pd\nimport re\n\n# 파일 경로를 지정\nleisure_type_df = pd.read_excel(\"/kaggle/input/leisure-type/.xlsx\")  # 여가활동 이름과 코드\nuser_cost_df = pd.read_csv(\"/kaggle/input/user-cost/cost.csv\")  # 사용자의 비용 정보\nuser_act_df = pd.read_csv(\"/kaggle/input/user-actt/user_act.csv\")  # 사용자 여가활동 코드\n\n# 여가활동 코드와 이름 매핑 (여기서는 'code' -> 'value' 구조)\nactivity_to_code = dict(zip(leisure_type_df['value'], leisure_type_df['code']))\n\n# 입력값 정리 함수 (공백 제거 및 특수문자 처리)\ndef clean_activity_name(name):\n    # 공백 제거하고 특수문자 (괄호, 쉼표 등) 처리\n    name = re.sub(r'\\s+', '', name)  # 공백 제거\n    name = re.sub(r'[^\\w\\s]', '', name)  # 특수문자 제거\n    return name.lower()  # 소문자로 변환\n\n# 여가활동 코드와 사용자 비용 연결\ndef get_activity_cost(activity_name):\n    # 입력받은 여가활동 이름 정리\n    cleaned_input_name = clean_activity_name(activity_name)\n\n    # 여가활동 이름을 정리하여 찾기\n    matched_activity = None\n    for activity in activity_to_code.keys():\n        if clean_activity_name(activity) == cleaned_input_name:\n            matched_activity = activity\n            break\n\n    if matched_activity:\n        activity_code = activity_to_code[matched_activity]\n        \n        # 여가활동 코드가 user_act_df의 어떤 열에도 포함되는지 찾기\n        related_users = user_act_df.apply(lambda row: activity_code in row.values, axis=1)\n        relevant_users_df = user_cost_df[related_users]\n        \n        # 해당하는 사용자들의 비용을 계산\n        cost_columns = [col for col in user_cost_df.columns if 'Q2_5' in col]\n        costs = relevant_users_df[cost_columns].values.flatten()\n\n        # NaN 값을 0으로 대체\n        costs = pd.Series(costs).fillna(0).values\n\n        if len(costs) > 0:\n            # 평균 비용을 계산하여 출력\n            average_cost = costs.mean()\n            return f\"'{matched_activity}'에 대한 평균 비용은 {average_cost:.2f}원입니다.\"\n        else:\n            return f\"'{matched_activity}'에 대한 비용 정보가 없습니다.\"\n    else:\n        return f\"'{activity_name}'에 대한 여가활동을 찾을 수 없습니다. 다시 입력해주세요.\"\n\n# 예시로 Gemini에서 추천 받은 여가활동들 (실제로는 Gemini API에서 받아오는 값)\ngemini_recommendations = [\n    \"전시회 관람(미술, 사진, 건축, 디자인 등)\", \n    \"음악연주회 관람(클래식, 오페라 등)\", \n    \"영화관람\", \n    \"스포츠 경기 직접관람- 경기장방문관람(축구, 야구, 농구, 배구 등)\",\n    \"노래방 가기\"\n]\n\n# Gemini 추천에 따른 평균 비용 출력\nfor activity in gemini_recommendations:\n    print(get_activity_cost(activity))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-15T02:34:09.142701Z","iopub.execute_input":"2024-11-15T02:34:09.143750Z","iopub.status.idle":"2024-11-15T02:34:10.114212Z","shell.execute_reply.started":"2024-11-15T02:34:09.143695Z","shell.execute_reply":"2024-11-15T02:34:10.112957Z"}},"outputs":[{"name":"stdout","text":"' 전시회 관람(미술, 사진, 건축, 디자인 등)'에 대한 평균 비용은 47199.27원입니다.\n' 음악연주회 관람(클래식, 오페라 등)'에 대한 평균 비용은 41721.52원입니다.\n' 영화관람'에 대한 평균 비용은 28347.11원입니다.\n' 스포츠 경기 직접관람- 경기장방문관람(축구, 야구,농구, 배구 등)'에 대한 평균 비용은 35232.69원입니다.\n' 노래방 가기'에 대한 평균 비용은 33375.27원입니다.\n","output_type":"stream"}],"execution_count":73},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}